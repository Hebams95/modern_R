[
["descriptive-statistics-and-data-manipulation.html", "Chapter 5 Descriptive statistics and data manipulation 5.1 Smoking is bad for you, but pipes are your friend 5.2 The {tidyverse}’s enfant prodige: {dplyr} 5.3 Reshaping data with tidyr 5.4 Scoped {tidyverse} verbs 5.5 Other useful {tidyverse} functions 5.6 Joining tibbles with full_join(), left_join(), right_join() and all the others 5.7 Special packages for special kinds of data: {forcats}, {lubridate}, and {stringr} 5.8 Working with a list of datasets 5.9 List-columns 5.10 Exercises", " Chapter 5 Descriptive statistics and data manipulation Now that we are familiar with some R objects and know how to import data, it is time to write some code. In this chapter, we are going to compute descriptive statistics for a single dataset, but also for a list of datasets. However, I will not give a list of functions to compute descriptive statistics; if you need a specific function you can find easily in the Help pane in Rstudio or using any modern internet search engine. What I will do is show you a workflow that allows you to compute the statisics you need fast. R has a lot of built-in functions for descriptive statistics; however, if you want to compute statistics by, say, gender, some more complex manipulations are needed. At least this was true in the past. Nowadays, thanks to the packages from the tidyverse, it is very easy and fast to compute descriptive statistics by any stratifying variable(s). The packages we are going to use for this are called dplyr and tidyr. dplyr contains a lot of functions that make manipulating data and computing descriptive statistics very easy. To make things easier for now, we are going to use example data included with dplyr. So no need to import an external dataset; this does not change anything to the example that we are going to study here; the source of the data does not matter for this. tidyr is very useful to reshape data and to do advanced cleaning of your data. All these tidyverse functions are also called verbs. Before learning about these verbs, let’s discuss about pipes. 5.1 Smoking is bad for you, but pipes are your friend The title of this section might sound weird at first, but by the end of it, you’ll get this (terrible) pun. You probably know the following painting by René Magritte, La trahison des images: It turns out there’s an R package from the tidyverse that is called magrittr. What does this package do? It brings pipes to R. Pipes are a concept from the Unix operating system; if you’re using a GNU+Linux distribution or macOS, you’re basically using a modern unix (that’s an oversimplification, but I’m an economist by training, and outrageously oversimplifying things is what we do, deal with it). The idea of pipes is to take the output of a command, and feed it as the input of another command. The magrittr package brings pipes to R, by using the weird looking %&gt;%. Try the following: library(magrittr) 16 %&gt;% sqrt ## [1] 4 Super weird right? But you probably understand what happened; 16 got fed as the first argument of the function sqrt(). You can chain multiple functions: 16 %&gt;% sqrt %&gt;% `+`(18) ## [1] 22 The output of 16 (16) got fed to sqrt(), and the output of sqrt(16) (4) got fed to +(18) (22). Without %&gt;% you’d write the line just above like this: sqrt(16) + 18 ## [1] 22 It might not be very clear right now why this is useful, but the %&gt;% is probably one of the most useful infix operators, because when using packages from the tidyverse, you will naturally want to chain a lot of functions together. Without the %&gt;% it would become messy very fast. %&gt;% is not the only pipe operator in magrittr. There’s %T%, %&lt;&gt;% and %$%. All have their uses, but are basically shortcuts to some common tasks with %&gt;% plus another function. Which means that you can live without them, and because of this, I will only discuss them briefly once we’ll have learned about the other tidyverse packages. 5.2 The {tidyverse}’s enfant prodige: {dplyr} The best way to get started with the tidyverse packages is to get to know {dplyr}. {dplyr} prodives a lot of very useful functions that makes it very easy to get discriptive statistics or add new columns to your data. 5.2.1 A first taste of data manipulation with {dplyr} This section will walk you through a typical analysis using {dplyr} funcitons. Just go with it; I will give more details in the next sections. First, let’s load dplyr and the included starwars dataset. Let’s also take a look at the first 5 lines of the dataset: library(dplyr) data(starwars) head(starwars) ## # A tibble: 6 x 13 ## name height mass hair_color skin_color eye_color birth_year gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 &lt;NA&gt; ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 &lt;NA&gt; ## 4 Dart… 202 136 none white yellow 41.9 male ## 5 Leia… 150 49 brown light brown 19 female ## 6 Owen… 178 120 brown, gr… light blue 52 male ## # ... with 5 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt; data(starwars) loads the example dataset called starwars that is included in the package dplyr. As I said earlier, this is just an example; you could have loaded an external dataset, from a .csv file for instance. This does not matter for what comes next. R includes a lot of functions for descriptive statistics, such as mean(), sd(), cov(), and many more. What dplyr brings to the table (among other niceties) is the possibility to apply these functions to the dataset easily. For example, imagine you want the average height of everyone in the dataset. Using the basic R functions, you could write this: mean(starwars$height) ## [1] NA starwars$height means that the user wants to access the column called height from the dataset starwars. Remember that the $ symbol is how you access elements of a named list. This is the same for columns of datasets as you can see. This is then given as an argument to the function mean(). But what if the user wants the average height by species? Before dplyr, a solution to this simple problem would have required more than a single command. Now this is as easy as: starwars %&gt;% group_by(species) %&gt;% summarise(mean(height)) ## # A tibble: 38 x 2 ## species `mean(height)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena 79 ## 2 Besalisk 198 ## 3 Cerean 198 ## 4 Chagrian 196 ## 5 Clawdite 168 ## 6 Droid NA ## 7 Dug 112 ## 8 Ewok 88 ## 9 Geonosian 183 ## 10 Gungan 209. ## # ... with 28 more rows The usefulness of the %&gt;% (pipe operator) becomes apparent now. Without it, one would write instead: summarise(group_by(starwars, species), mean(height)) ## # A tibble: 38 x 2 ## species `mean(height)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena 79 ## 2 Besalisk 198 ## 3 Cerean 198 ## 4 Chagrian 196 ## 5 Clawdite 168 ## 6 Droid NA ## 7 Dug 112 ## 8 Ewok 88 ## 9 Geonosian 183 ## 10 Gungan 209. ## # ... with 28 more rows as you can clearly see, it is much more difficult to read. Imagine now that I want the average height by species, but only for males. Again, this is very easy using %&gt;%: starwars %&gt;% filter(gender == &quot;male&quot;) %&gt;% group_by(species) %&gt;% summarise(mean(height)) ## Warning: Grouping rowwise data frame strips rowwise nature ## # A tibble: 32 x 2 ## species `mean(height)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena 79 ## 2 Besalisk 198 ## 3 Cerean 198 ## 4 Chagrian 196 ## 5 Dug 112 ## 6 Ewok 88 ## 7 Geonosian 183 ## 8 Gungan 209. ## 9 Human NA ## 10 Iktotchi 188 ## # ... with 22 more rows Again, the %&gt;% makes the above lines of code very easy to read. Without it, one would need to write: summarise(group_by(filter(starwars, gender == &quot;male&quot;), species), mean(height)) ## Warning: Grouping rowwise data frame strips rowwise nature ## # A tibble: 32 x 2 ## species `mean(height)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena 79 ## 2 Besalisk 198 ## 3 Cerean 198 ## 4 Chagrian 196 ## 5 Dug 112 ## 6 Ewok 88 ## 7 Geonosian 183 ## 8 Gungan 209. ## 9 Human NA ## 10 Iktotchi 188 ## # ... with 22 more rows I think you agree with me that this is not very readable. Once you’re used to %&gt;%, you won’t go back to not use it. To be a bit more precise: make things clearer; filter(), group_by() and summarise() are functions that are included in dplyr. %&gt;% is actually a function from magrittr, but this package gets loaded on the fly when you load dplyr, so you do not need to worry about it. mean() is a function native to R. The result of all these operations that use dplyr functions are actually other datasets, or tibbles. This means that you can save them in variable, and then work with these as any other datasets. mean_height = starwars %&gt;% group_by(species) %&gt;% summarise(mean(height)) ## Warning: Grouping rowwise data frame strips rowwise nature class(mean_height) ## [1] &quot;tbl_df&quot; &quot;tbl&quot; &quot;data.frame&quot; head(mean_height) ## # A tibble: 6 x 2 ## species `mean(height)` ## &lt;chr&gt; &lt;dbl&gt; ## 1 Aleena 79 ## 2 Besalisk 198 ## 3 Cerean 198 ## 4 Chagrian 196 ## 5 Clawdite 168 ## 6 Droid NA You could then write this data to disk using rio::export() for instance. If you need more than the mean of the height, you can keep adding as many functions as needed: summary_table = starwars %&gt;% group_by(species) %&gt;% summarise(ave_height = mean(height), var_height = var(height), n_obs = n()) print(summary_table) ## # A tibble: 38 x 4 ## species ave_height var_height n_obs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Aleena 79 NA 1 ## 2 Besalisk 198 NA 1 ## 3 Cerean 198 NA 1 ## 4 Chagrian 196 NA 1 ## 5 Clawdite 168 NA 1 ## 6 Droid NA NA 5 ## 7 Dug 112 NA 1 ## 8 Ewok 88 NA 1 ## 9 Geonosian 183 NA 1 ## 10 Gungan 209. 201. 3 ## # ... with 28 more rows I’ve added more functions, namely var(), to get the variance of height, and n(), which is a function from dplyr, not base R, to get the number of observations. This is quite useful, because we see that for a lot of species we only have one single individual! Let’s focus on the species for which we have more than 1 individual. Since we save all the previous operations (which produce a tibble) in a variable, we can keep going from there: summary_table2 = summary_table %&gt;% filter(n_obs &gt; 1) print(summary_table2) ## # A tibble: 9 x 4 ## species ave_height var_height n_obs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Droid NA NA 5 ## 2 Gungan 209. 201. 3 ## 3 Human NA NA 35 ## 4 Kaminoan 221 128 2 ## 5 Mirialan 168 8 2 ## 6 Twi&#39;lek 179 2 2 ## 7 Wookiee 231 18 2 ## 8 Zabrak 173 8 2 ## 9 &lt;NA&gt; NA NA 5 There’s a lot of NAs; this is because by default, mean() and var() return NA if even one single observation is NA. This is good, because it forces you to look at the data to see what is going on. If you would get a number, even if there were NAs you could very easily miss these missing values. It is better for functions to fail early and often than the opposite. mean() and var() have a na.rm option that the user can set to TRUE to get the result by ignoring the NAs: starwars %&gt;% group_by(species) %&gt;% summarise(ave_height = mean(height, na.rm = TRUE), var_height = var(height, na.rm = TRUE), n_obs = n()) %&gt;% filter(n_obs &gt; 1) ## Warning: Grouping rowwise data frame strips rowwise nature ## # A tibble: 9 x 4 ## species ave_height var_height n_obs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Droid 140 2705. 5 ## 2 Gungan 209. 201. 3 ## 3 Human 177. 157. 35 ## 4 Kaminoan 221 128 2 ## 5 Mirialan 168 8 2 ## 6 Twi&#39;lek 179 2 2 ## 7 Wookiee 231 18 2 ## 8 Zabrak 173 8 2 ## 9 &lt;NA&gt; 160 1826 5 In the code above, I have combined the two previous steps to get the result I’m interested in. There’s a line in the final output that says NA for the species. Let’s go back to the raw data and find these lines: starwars %&gt;% filter(is.na(species)) ## Source: local data frame [5 x 15] ## Groups: &lt;by row&gt; ## ## # A tibble: 5 x 15 ## name height mass hair_color skin_color eye_color birth_year gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Ric … 183 NA brown fair blue NA male ## 2 Quar… 183 NA black dark brown 62 male ## 3 R4-P… 96 NA none silver, r… red, blue NA female ## 4 Sly … 178 48 none pale white NA female ## 5 Capt… NA NA unknown unknown unknown NA female ## # ... with 7 more variables: homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;, ## # vehicles &lt;list&gt;, starships &lt;list&gt;, n_films &lt;int&gt;, more_1 &lt;chr&gt; To test for NA, one uses the function is.na() not something like species == &quot;NA&quot; or anything like that. !is.na() does the opposite: starwars %&gt;% filter(!is.na(species)) ## Source: local data frame [82 x 15] ## Groups: &lt;by row&gt; ## ## # A tibble: 82 x 15 ## name height mass hair_color skin_color eye_color birth_year gender ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Luke… 172 77 blond fair blue 19 male ## 2 C-3PO 167 75 &lt;NA&gt; gold yellow 112 &lt;NA&gt; ## 3 R2-D2 96 32 &lt;NA&gt; white, bl… red 33 &lt;NA&gt; ## 4 Dart… 202 136 none white yellow 41.9 male ## 5 Leia… 150 49 brown light brown 19 female ## 6 Owen… 178 120 brown, gr… light blue 52 male ## 7 Beru… 165 75 brown light blue 47 female ## 8 R5-D4 97 32 &lt;NA&gt; white, red red NA &lt;NA&gt; ## 9 Bigg… 183 84 black light brown 24 male ## 10 Obi-… 182 77 auburn, w… fair blue-gray 57 male ## # ... with 72 more rows, and 7 more variables: homeworld &lt;chr&gt;, ## # species &lt;chr&gt;, films &lt;list&gt;, vehicles &lt;list&gt;, starships &lt;list&gt;, ## # n_films &lt;int&gt;, more_1 &lt;chr&gt; The ! function negates a predicate function (a predicate function is a function that returns TRUE or FALSE). We can then rerun our analysis from before: starwars %&gt;% filter(!is.na(species)) %&gt;% group_by(species) %&gt;% summarise(ave_height = mean(height, na.rm = TRUE), var_height = var(height, na.rm = TRUE), n_obs = n()) %&gt;% filter(n_obs &gt; 1) ## Warning: Grouping rowwise data frame strips rowwise nature ## # A tibble: 8 x 4 ## species ave_height var_height n_obs ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Droid 140 2705. 5 ## 2 Gungan 209. 201. 3 ## 3 Human 177. 157. 35 ## 4 Kaminoan 221 128 2 ## 5 Mirialan 168 8 2 ## 6 Twi&#39;lek 179 2 2 ## 7 Wookiee 231 18 2 ## 8 Zabrak 173 8 2 And why not compute the same table, but first add another stratifying variable? starwars %&gt;% filter(!is.na(species)) %&gt;% group_by(species, gender) %&gt;% summarise(ave_height = mean(height, na.rm = TRUE), var_height = var(height, na.rm = TRUE), n_obs = n()) %&gt;% filter(n_obs &gt; 1) ## # A tibble: 8 x 5 ## # Groups: species [6] ## species gender ave_height var_height n_obs ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Droid none 200 NA 2 ## 2 Droid &lt;NA&gt; 120 1657 3 ## 3 Gungan male 209. 201. 3 ## 4 Human female 160. 48.8 9 ## 5 Human male 182. 67.1 26 ## 6 Mirialan female 168 8 2 ## 7 Wookiee male 231 18 2 ## 8 Zabrak male 173 8 2 Ok, that’s it for a first taste. We have already discovered some very useful {dplyr} functions, filter(), group_by() and summarise summarise(). Now, we are going to learn more about these functions in more detail. 5.2.2 Filter the rows of a dataset with filter() We’re going to use the Gasoline dataset from the plm package, so install that first: install.packages(&quot;plm&quot;) Then load the required data: data(Gasoline, package = &quot;plm&quot;) and load dplyr: library(dplyr) This dataset gives the consumption of gasoline for 18 countries from 1960 to 1978. When you load the data like this, it is a standard data.frame. dplyr functions can be used on standard data.frame objects, but also on tibbles. tibbles are just like data frame, but with a better print method (and other niceties). I’ll discuss the {tibble} package later, but for now, let’s convert the data to a tibble and change its name: gasoline &lt;- as_tibble(Gasoline) filter() is pretty straightforward. What if you would like to subset the data to focus on the year 1969? Simple: filter(gasoline, year == 1969) ## # A tibble: 18 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## 2 BELGIUM 1969 3.85 -5.86 -0.355 -8.52 ## 3 CANADA 1969 4.86 -5.56 -1.04 -8.10 ## 4 DENMARK 1969 4.17 -5.72 -0.407 -8.47 ## 5 FRANCE 1969 3.77 -5.84 -0.315 -8.37 ## 6 GERMANY 1969 3.90 -5.83 -0.589 -8.44 ## 7 GREECE 1969 4.89 -6.59 -0.180 -10.7 ## 8 IRELAND 1969 4.21 -6.38 -0.272 -8.95 ## 9 ITALY 1969 3.74 -6.28 -0.248 -8.67 ## 10 JAPAN 1969 4.52 -6.16 -0.417 -9.61 ## 11 NETHERLA 1969 3.99 -5.88 -0.417 -8.63 ## 12 NORWAY 1969 4.09 -5.74 -0.338 -8.69 ## 13 SPAIN 1969 3.99 -5.60 0.669 -9.72 ## 14 SWEDEN 1969 3.99 -7.77 -2.73 -8.20 ## 15 SWITZERL 1969 4.21 -5.91 -0.918 -8.47 ## 16 TURKEY 1969 5.72 -7.39 -0.298 -12.5 ## 17 U.K. 1969 3.95 -6.03 -0.383 -8.47 ## 18 U.S.A. 1969 4.84 -5.41 -1.22 -7.79 Let’s use %&gt;%, since we’re familiar with it now: gasoline %&gt;% filter(year == 1969) ## # A tibble: 18 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## 2 BELGIUM 1969 3.85 -5.86 -0.355 -8.52 ## 3 CANADA 1969 4.86 -5.56 -1.04 -8.10 ## 4 DENMARK 1969 4.17 -5.72 -0.407 -8.47 ## 5 FRANCE 1969 3.77 -5.84 -0.315 -8.37 ## 6 GERMANY 1969 3.90 -5.83 -0.589 -8.44 ## 7 GREECE 1969 4.89 -6.59 -0.180 -10.7 ## 8 IRELAND 1969 4.21 -6.38 -0.272 -8.95 ## 9 ITALY 1969 3.74 -6.28 -0.248 -8.67 ## 10 JAPAN 1969 4.52 -6.16 -0.417 -9.61 ## 11 NETHERLA 1969 3.99 -5.88 -0.417 -8.63 ## 12 NORWAY 1969 4.09 -5.74 -0.338 -8.69 ## 13 SPAIN 1969 3.99 -5.60 0.669 -9.72 ## 14 SWEDEN 1969 3.99 -7.77 -2.73 -8.20 ## 15 SWITZERL 1969 4.21 -5.91 -0.918 -8.47 ## 16 TURKEY 1969 5.72 -7.39 -0.298 -12.5 ## 17 U.K. 1969 3.95 -6.03 -0.383 -8.47 ## 18 U.S.A. 1969 4.84 -5.41 -1.22 -7.79 You can also filter more than just one year, by using the %in% operator: gasoline %&gt;% filter(year %in% seq(1969, 1973)) ## # A tibble: 90 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## 2 AUSTRIA 1970 4.08 -6.08 -0.597 -8.73 ## 3 AUSTRIA 1971 4.11 -6.04 -0.654 -8.64 ## 4 AUSTRIA 1972 4.13 -5.98 -0.596 -8.54 ## 5 AUSTRIA 1973 4.20 -5.90 -0.594 -8.49 ## 6 BELGIUM 1969 3.85 -5.86 -0.355 -8.52 ## 7 BELGIUM 1970 3.87 -5.80 -0.378 -8.45 ## 8 BELGIUM 1971 3.87 -5.76 -0.399 -8.41 ## 9 BELGIUM 1972 3.91 -5.71 -0.311 -8.36 ## 10 BELGIUM 1973 3.90 -5.64 -0.373 -8.31 ## # ... with 80 more rows or even non-consecutive years: gasoline %&gt;% filter(year %in% c(1969, 1973, 1977)) ## # A tibble: 54 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## 2 AUSTRIA 1973 4.20 -5.90 -0.594 -8.49 ## 3 AUSTRIA 1977 3.93 -5.83 -0.422 -8.25 ## 4 BELGIUM 1969 3.85 -5.86 -0.355 -8.52 ## 5 BELGIUM 1973 3.90 -5.64 -0.373 -8.31 ## 6 BELGIUM 1977 3.85 -5.56 -0.432 -8.14 ## 7 CANADA 1969 4.86 -5.56 -1.04 -8.10 ## 8 CANADA 1973 4.90 -5.41 -1.13 -7.94 ## 9 CANADA 1977 4.81 -5.34 -1.07 -7.77 ## 10 DENMARK 1969 4.17 -5.72 -0.407 -8.47 ## # ... with 44 more rows %in% tests if an object is part of a set. 5.2.3 Select columns with select() While filter() allows you to keep or discard rows of data, select() allows you to keep or discard entire columns. To keep columns: gasoline %&gt;% select(country, year, lrpmg) ## # A tibble: 342 x 3 ## country year lrpmg ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 -0.335 ## 2 AUSTRIA 1961 -0.351 ## 3 AUSTRIA 1962 -0.380 ## 4 AUSTRIA 1963 -0.414 ## 5 AUSTRIA 1964 -0.445 ## 6 AUSTRIA 1965 -0.497 ## 7 AUSTRIA 1966 -0.467 ## 8 AUSTRIA 1967 -0.506 ## 9 AUSTRIA 1968 -0.522 ## 10 AUSTRIA 1969 -0.559 ## # ... with 332 more rows To discard them: gasoline %&gt;% select(-country, -year, -lrpmg) ## # A tibble: 342 x 3 ## lgaspcar lincomep lcarpcap ## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4.17 -6.47 -9.77 ## 2 4.10 -6.43 -9.61 ## 3 4.07 -6.41 -9.46 ## 4 4.06 -6.37 -9.34 ## 5 4.04 -6.32 -9.24 ## 6 4.03 -6.29 -9.12 ## 7 4.05 -6.25 -9.02 ## 8 4.05 -6.23 -8.93 ## 9 4.05 -6.21 -8.85 ## 10 4.05 -6.15 -8.79 ## # ... with 332 more rows To rename them: gasoline %&gt;% select(country, date = year, lrpmg) ## # A tibble: 342 x 3 ## country date lrpmg ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 -0.335 ## 2 AUSTRIA 1961 -0.351 ## 3 AUSTRIA 1962 -0.380 ## 4 AUSTRIA 1963 -0.414 ## 5 AUSTRIA 1964 -0.445 ## 6 AUSTRIA 1965 -0.497 ## 7 AUSTRIA 1966 -0.467 ## 8 AUSTRIA 1967 -0.506 ## 9 AUSTRIA 1968 -0.522 ## 10 AUSTRIA 1969 -0.559 ## # ... with 332 more rows There’s also rename(): gasoline %&gt;% rename(date = year) ## # A tibble: 342 x 6 ## country date lgaspcar lincomep lrpmg lcarpcap ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows rename() does not do any kind of selection, but just renames. You can also use select() to re-order columns: gasoline %&gt;% select(year, country, lrpmg, everything()) ## # A tibble: 342 x 6 ## year country lrpmg lgaspcar lincomep lcarpcap ## * &lt;int&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1960 AUSTRIA -0.335 4.17 -6.47 -9.77 ## 2 1961 AUSTRIA -0.351 4.10 -6.43 -9.61 ## 3 1962 AUSTRIA -0.380 4.07 -6.41 -9.46 ## 4 1963 AUSTRIA -0.414 4.06 -6.37 -9.34 ## 5 1964 AUSTRIA -0.445 4.04 -6.32 -9.24 ## 6 1965 AUSTRIA -0.497 4.03 -6.29 -9.12 ## 7 1966 AUSTRIA -0.467 4.05 -6.25 -9.02 ## 8 1967 AUSTRIA -0.506 4.05 -6.23 -8.93 ## 9 1968 AUSTRIA -0.522 4.05 -6.21 -8.85 ## 10 1969 AUSTRIA -0.559 4.05 -6.15 -8.79 ## # ... with 332 more rows everything() is a helper function, and there’s also starts_with(), and ends_with(). For example, what if we are only interested in columns whose name start with “l”? gasoline %&gt;% select(starts_with(&quot;l&quot;)) ## # A tibble: 342 x 4 ## lgaspcar lincomep lrpmg lcarpcap ## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4.17 -6.47 -0.335 -9.77 ## 2 4.10 -6.43 -0.351 -9.61 ## 3 4.07 -6.41 -0.380 -9.46 ## 4 4.06 -6.37 -0.414 -9.34 ## 5 4.04 -6.32 -0.445 -9.24 ## 6 4.03 -6.29 -0.497 -9.12 ## 7 4.05 -6.25 -0.467 -9.02 ## 8 4.05 -6.23 -0.506 -8.93 ## 9 4.05 -6.21 -0.522 -8.85 ## 10 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows ends_with() works in a similar fashion. There is also contains(), but I will discuss that one later. Another verb, similar to select(), is pull(). Let’s compare the two: gasoline %&gt;% select(lrpmg) ## # A tibble: 342 x 1 ## lrpmg ## * &lt;dbl&gt; ## 1 -0.335 ## 2 -0.351 ## 3 -0.380 ## 4 -0.414 ## 5 -0.445 ## 6 -0.497 ## 7 -0.467 ## 8 -0.506 ## 9 -0.522 ## 10 -0.559 ## # ... with 332 more rows gasoline %&gt;% pull(lrpmg) ## [1] -0.33454761 -0.35132761 -0.37951769 -0.41425139 -0.44533536 ## [6] -0.49706066 -0.46683773 -0.50588340 -0.52241255 -0.55911051 ## [11] -0.59656122 -0.65445914 -0.59633184 -0.59444681 -0.46602693 ## [16] -0.45414221 -0.50008372 -0.42191563 -0.46960312 -0.16570961 ## [21] -0.17173098 -0.22229138 -0.25046225 -0.27591057 -0.34493695 ## [26] -0.23639770 -0.26699499 -0.31116076 -0.35480852 -0.37794044 ## [31] -0.39922992 -0.31064584 -0.37309192 -0.36223563 -0.36430848 ## [36] -0.37896584 -0.43164133 -0.59094964 -0.97210650 -0.97229024 ## [41] -0.97860756 -1.01904791 -1.00285696 -1.01712549 -1.01694436 ## [46] -1.02359713 -1.01984524 -1.03686389 -1.06733308 -1.05803676 ## [51] -1.09966703 -1.13316142 -1.12379997 -1.18568427 -1.06179659 ## [56] -1.07084448 -1.07495073 -0.19570260 -0.25361844 -0.21875400 ## [61] -0.24800936 -0.30654923 -0.32701542 -0.39618846 -0.44257369 ## [66] -0.35204752 -0.40687922 -0.44046082 -0.45473954 -0.49918863 ## [71] -0.43257185 -0.42517720 -0.39395431 -0.35361534 -0.35690917 ## [76] -0.29068135 -0.01959833 -0.02386000 -0.06892022 -0.13792900 ## [81] -0.19784646 -0.23365325 -0.26427164 -0.29405795 -0.32316179 ## [86] -0.31519087 -0.33384616 -0.37945667 -0.40781642 -0.47503429 ## [91] -0.21698191 -0.25838174 -0.24651309 -0.22550681 -0.38075942 ## [96] -0.18591078 -0.23095384 -0.34384171 -0.37464672 -0.39965256 ## [101] -0.43987825 -0.54000197 -0.54998139 -0.43824222 -0.58923137 ## [106] -0.63329520 -0.67176311 -0.71797458 -0.72587521 -0.56982876 ## [111] -0.56482380 -0.62481298 -0.59761210 -0.62817279 -0.08354740 ## [116] -0.10421997 -0.13320751 -0.15653576 -0.18051772 -0.07793999 ## [121] -0.11491900 -0.13775849 -0.15375883 -0.17986997 -0.20252426 ## [126] -0.06761078 -0.11973059 -0.05191029 0.31625351 0.20631574 ## [131] 0.19319312 0.23502961 0.16896037 -0.07648118 -0.12040874 ## [136] -0.14160039 -0.15232915 -0.24428212 -0.16899366 -0.21071901 ## [141] -0.17383533 -0.21339314 -0.27162842 -0.32069023 -0.36041067 ## [146] -0.42393131 -0.64567297 -0.55343875 -0.64126416 -0.66134256 ## [151] -0.56011483 -0.66277808 0.16507708 -0.08559038 -0.18351291 ## [156] -0.26541405 -0.42609643 -0.32712637 -0.24887418 -0.19160048 ## [161] -0.20616656 -0.24756681 -0.23271512 -0.14822267 -0.21508857 ## [166] -0.32508487 -0.22290860 -0.03270913 0.10292798 0.16418805 ## [171] 0.03482212 -0.14532271 -0.14874940 -0.18731459 -0.19996473 ## [176] -0.20386433 -0.23786571 -0.27411537 -0.33167240 -0.35126918 ## [181] -0.41685019 -0.46203546 -0.43941354 -0.52100094 -0.46270739 ## [186] -0.19090636 -0.15948473 -0.20726559 -0.21904447 -0.28707638 ## [191] -0.20148480 -0.21599265 -0.25968008 -0.29718661 -0.36929389 ## [196] -0.34197503 -0.34809007 -0.31232019 -0.44450431 -0.41694955 ## [201] -0.39954544 -0.43393029 -0.31903240 -0.42728193 -0.35253685 ## [206] -0.43426178 -0.42908393 -0.46474195 -0.55791459 -0.13968957 ## [211] -0.15790514 -0.19908809 -0.23263318 -0.26374731 -0.31593124 ## [216] -0.25011726 -0.26555763 -0.30036775 -0.33823045 -0.39072560 ## [221] -0.30127223 -0.26023925 -0.33880765 -0.15100924 -0.32726757 ## [226] -0.35308752 -0.38255762 -0.30765935 1.12531070 1.10956235 ## [231] 1.05700394 0.97683534 0.91532254 0.81666055 0.75671751 ## [236] 0.74130811 0.70386453 0.66948950 0.61217208 0.60699563 ## [241] 0.53716844 0.43377166 0.52492096 0.62955545 0.68385409 ## [246] 0.52627167 0.62141374 -2.52041588 -2.57148340 -2.53448158 ## [251] -2.60511224 -2.65801626 -2.64476790 -2.63901460 -2.65609762 ## [256] -2.67918662 -2.73190414 -2.73359211 -2.77884554 -2.77467537 ## [261] -2.84142900 -2.79840677 -2.76731461 -2.82294480 -2.82005896 ## [266] -2.89649671 -0.82321833 -0.86558473 -0.82218510 -0.86012004 ## [271] -0.86767682 -0.90528668 -0.85956665 -0.90656671 -0.87232520 ## [276] -0.91812162 -0.96344188 -1.03746081 -0.94015345 -0.86722756 ## [281] -0.88692306 -0.88475790 -0.90736205 -0.91147285 -1.03208811 ## [286] -0.25340821 -0.34252375 -0.40820484 -0.22499174 -0.25219448 ## [291] -0.29347614 -0.35640491 -0.33515022 -0.36507386 -0.29845417 ## [296] -0.39882648 -0.30461880 -0.54637424 -0.69162023 -0.33965308 ## [301] -0.53794675 -0.75141027 -0.95552413 -0.35290961 -0.39108581 ## [306] -0.45185308 -0.42287690 -0.46335147 -0.49577430 -0.42654915 ## [311] -0.47068145 -0.44118786 -0.46245080 -0.38332457 -0.41899030 ## [316] -0.46135978 -0.52777246 -0.56529718 -0.56641296 -0.20867428 ## [321] -0.27354010 -0.50886285 -0.78652911 -1.12111489 -1.14624034 ## [326] -1.16187449 -1.17991524 -1.20026222 -1.19428750 -1.19026054 ## [331] -1.18991215 -1.20730059 -1.22314272 -1.25176347 -1.28131560 ## [336] -1.33116930 -1.29066967 -1.23146686 -1.20037697 -1.15468197 ## [341] -1.17590974 -1.21206183 pull(), unlike select(), does not return a tibble, but only the column you want. 5.2.4 Group the observations of your dataset with group_by() group_by() is a very useful verb; as the name implies, it allows you to create groups and then, for example, compute descriptive statistics by groups. For example, let’s group our data by country: gasoline %&gt;% group_by(country) ## # A tibble: 342 x 6 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows It looks like nothing much happened, but if you look at the second line of the output you can read the following: ## # Groups: country [18] this means that the data is grouped, and every computation you will do now will take these groups into account. It is also possible to group by more than one variable: gasoline %&gt;% group_by(country, year) ## # A tibble: 342 x 6 ## # Groups: country, year [342] ## country year lgaspcar lincomep lrpmg lcarpcap ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows and so on. You can then also ungroup: gasoline %&gt;% group_by(country, year) %&gt;% ungroup() ## # A tibble: 342 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows Once your data is grouped, the operations that will follow will be executed inside each group. 5.2.5 Get summary statistics with summarise() Ok, now that we have learned the basic verbs, we can start to do more interesting stuff. For example, one might want to compute the average gasoline consumption in each country, for the whole period: gasoline %&gt;% group_by(country) %&gt;% summarise(mean(lgaspcar)) ## # A tibble: 18 x 2 ## country `mean(lgaspcar)` ## &lt;fct&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 ## 2 BELGIUM 3.92 ## 3 CANADA 4.86 ## 4 DENMARK 4.19 ## 5 FRANCE 3.82 ## 6 GERMANY 3.89 ## 7 GREECE 4.88 ## 8 IRELAND 4.23 ## 9 ITALY 3.73 ## 10 JAPAN 4.70 ## 11 NETHERLA 4.08 ## 12 NORWAY 4.11 ## 13 SPAIN 4.06 ## 14 SWEDEN 4.01 ## 15 SWITZERL 4.24 ## 16 TURKEY 5.77 ## 17 U.K. 3.98 ## 18 U.S.A. 4.82 mean() was given as an argument to summarise(), which is a dplyr verb. What we get is another tibble, that contains the variable we used to group, as well as the average per country. We can also rename this column: gasoline %&gt;% group_by(country) %&gt;% summarise(mean_gaspcar = mean(lgaspcar)) ## # A tibble: 18 x 2 ## country mean_gaspcar ## &lt;fct&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 ## 2 BELGIUM 3.92 ## 3 CANADA 4.86 ## 4 DENMARK 4.19 ## 5 FRANCE 3.82 ## 6 GERMANY 3.89 ## 7 GREECE 4.88 ## 8 IRELAND 4.23 ## 9 ITALY 3.73 ## 10 JAPAN 4.70 ## 11 NETHERLA 4.08 ## 12 NORWAY 4.11 ## 13 SPAIN 4.06 ## 14 SWEDEN 4.01 ## 15 SWITZERL 4.24 ## 16 TURKEY 5.77 ## 17 U.K. 3.98 ## 18 U.S.A. 4.82 and because the output is a tibble, we can continue to use dplyr verbs on it: gasoline %&gt;% group_by(country) %&gt;% summarise(mean_gaspcar = mean(lgaspcar)) %&gt;% filter(country == &quot;FRANCE&quot;) ## # A tibble: 1 x 2 ## country mean_gaspcar ## &lt;fct&gt; &lt;dbl&gt; ## 1 FRANCE 3.82 summarise() is a very useful verb. For example, we can compute several descriptive statistics at once: gasoline %&gt;% group_by(country) %&gt;% summarise(mean_gaspcar = mean(lgaspcar), sd_gaspcar = sd(lgaspcar), max_gaspcar = max(lgaspcar), min_gaspcar = min(lgaspcar)) ## # A tibble: 18 x 5 ## country mean_gaspcar sd_gaspcar max_gaspcar min_gaspcar ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 0.0693 4.20 3.92 ## 2 BELGIUM 3.92 0.103 4.16 3.82 ## 3 CANADA 4.86 0.0262 4.90 4.81 ## 4 DENMARK 4.19 0.158 4.50 4.00 ## 5 FRANCE 3.82 0.0499 3.91 3.75 ## 6 GERMANY 3.89 0.0239 3.93 3.85 ## 7 GREECE 4.88 0.255 5.38 4.48 ## 8 IRELAND 4.23 0.0437 4.33 4.16 ## 9 ITALY 3.73 0.220 4.05 3.38 ## 10 JAPAN 4.70 0.684 6.00 3.95 ## 11 NETHERLA 4.08 0.286 4.65 3.71 ## 12 NORWAY 4.11 0.123 4.44 3.96 ## 13 SPAIN 4.06 0.317 4.75 3.62 ## 14 SWEDEN 4.01 0.0364 4.07 3.91 ## 15 SWITZERL 4.24 0.102 4.44 4.05 ## 16 TURKEY 5.77 0.329 6.16 5.14 ## 17 U.K. 3.98 0.0479 4.10 3.91 ## 18 U.S.A. 4.82 0.0219 4.86 4.79 Because the output is a tibble, you can save it in a variable of course: desc_gasoline &lt;- gasoline %&gt;% group_by(country) %&gt;% summarise(mean_gaspcar = mean(lgaspcar), sd_gaspcar = sd(lgaspcar), max_gaspcar = max(lgaspcar), min_gaspcar = min(lgaspcar)) And then you can answer questions such as, which country has the maximum average gasoline consumption?: desc_gasoline %&gt;% filter(max(mean_gaspcar) == mean_gaspcar) ## # A tibble: 1 x 5 ## country mean_gaspcar sd_gaspcar max_gaspcar min_gaspcar ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 TURKEY 5.77 0.329 6.16 5.14 Turns out it’s Turkey. What about the minimum consumption? desc_gasoline %&gt;% filter(min(mean_gaspcar) == mean_gaspcar) ## # A tibble: 1 x 5 ## country mean_gaspcar sd_gaspcar max_gaspcar min_gaspcar ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ITALY 3.73 0.220 4.05 3.38 Because the output of dplyr verbs is a tibble, it is possible to continue working with it. This is one shortcoming of using the base summary() function. The object returned by that function is not very easy to manipulate. 5.2.6 Adding columns with mutate() and transmute() mutate() adds a column to the tibble, which can contain any transformation of any other variable: gasoline %&gt;% group_by(country) %&gt;% mutate(n()) ## # A tibble: 342 x 7 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap `n()` ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 19 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 19 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 19 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 19 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 19 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 19 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 19 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 19 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 19 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 19 ## # ... with 332 more rows Using mutate() I’ve added a column that counts how many times the country appears in the tibble, using n(), another dplyr function. There’s also count() and tally(), which we are going to see further down. It is also possible to rename the column on the fly: gasoline %&gt;% group_by(country) %&gt;% mutate(count = n()) ## # A tibble: 342 x 7 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap count ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 19 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 19 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 19 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 19 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 19 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 19 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 19 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 19 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 19 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 19 ## # ... with 332 more rows It is possible to do any arbitrary operation: gasoline %&gt;% group_by(country) %&gt;% mutate(spam = exp(lgaspcar + lincomep)) ## # A tibble: 342 x 7 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap spam ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 4.17 -6.47 -0.335 -9.77 0.100 ## 2 AUSTRIA 1961 4.10 -6.43 -0.351 -9.61 0.0978 ## 3 AUSTRIA 1962 4.07 -6.41 -0.380 -9.46 0.0969 ## 4 AUSTRIA 1963 4.06 -6.37 -0.414 -9.34 0.0991 ## 5 AUSTRIA 1964 4.04 -6.32 -0.445 -9.24 0.102 ## 6 AUSTRIA 1965 4.03 -6.29 -0.497 -9.12 0.104 ## 7 AUSTRIA 1966 4.05 -6.25 -0.467 -9.02 0.110 ## 8 AUSTRIA 1967 4.05 -6.23 -0.506 -8.93 0.113 ## 9 AUSTRIA 1968 4.05 -6.21 -0.522 -8.85 0.115 ## 10 AUSTRIA 1969 4.05 -6.15 -0.559 -8.79 0.122 ## # ... with 332 more rows transmute() is the same as mutate(), but only returns the created variable: gasoline %&gt;% group_by(country) %&gt;% transmute(spam = exp(lgaspcar + lincomep)) ## # A tibble: 342 x 2 ## # Groups: country [18] ## country spam ## &lt;fct&gt; &lt;dbl&gt; ## 1 AUSTRIA 0.100 ## 2 AUSTRIA 0.0978 ## 3 AUSTRIA 0.0969 ## 4 AUSTRIA 0.0991 ## 5 AUSTRIA 0.102 ## 6 AUSTRIA 0.104 ## 7 AUSTRIA 0.110 ## 8 AUSTRIA 0.113 ## 9 AUSTRIA 0.115 ## 10 AUSTRIA 0.122 ## # ... with 332 more rows That was it for the basic {dplyr} verbs. Next, we’re going to learn about {tidyr}. 5.3 Reshaping data with tidyr Another important package from the tidyverse that goes hand in hand with dplyr is tidyr. tidyr is the package you need when it’s time to reshape data. The basic functions from tidyr, spread() and gather() make it possible to go from long to wide datasets respectively. 5.3.1 spread() and gather() Let’s first create a fake dataset: library(tidyr) survey_data = tribble( ~id, ~variable, ~value, 1, &quot;var1&quot;, 1, 1, &quot;var2&quot;, 0.2, 2, &quot;var1&quot;, 1.4, 2, &quot;var2&quot;, 1.9, 3, &quot;var1&quot;, 0.1, 3, &quot;var2&quot;, 2.8, 4, &quot;var1&quot;, 1.7, 4, &quot;var2&quot;, 1.9 ) head(survey_data) ## # A tibble: 6 x 3 ## id variable value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 var1 1 ## 2 1 var2 0.2 ## 3 2 var1 1.4 ## 4 2 var2 1.9 ## 5 3 var1 0.1 ## 6 3 var2 2.8 I used the tribble() function from the {tibble} package. I’ll discuss this package later, for now, let’s focus on {tidyr}. survey_data is a long dataset. We can reshape it to be wide using the spread() function: wide_data = survey_data %&gt;% spread(variable, value) head(wide_data) ## # A tibble: 4 x 3 ## id var1 var2 ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 0.2 ## 2 2 1.4 1.9 ## 3 3 0.1 2.8 ## 4 4 1.7 1.9 This means that we spread the column called “variable”, which will produce one column per category of “variable”. Then we fill in the rows with the data contained in the column “value”. To go from a wide dataset to a long one, we use gather(): long_data = wide_data %&gt;% gather(variable, value, var1, var2) print(long_data) ## # A tibble: 8 x 3 ## id variable value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 var1 1 ## 2 2 var1 1.4 ## 3 3 var1 0.1 ## 4 4 var1 1.7 ## 5 1 var2 0.2 ## 6 2 var2 1.9 ## 7 3 var2 2.8 ## 8 4 var2 1.9 long_data and survey_data are the same datasets, but in a different order. In the wide_data tibble, we had 3 columns: id, var1 and var2. We want to stack ‘var1’ and ‘var2’ in a new column, that we choose to call “variable”. This is the “key”. For the value, we are using the values contained in var1 and var2. Sometimes using spread() or gather() requires some trial and error. I advise you play around with the examples above to really grasp how these powerful functions work. 5.3.2 Put order in your columns with separate(), extract(), unite(), and in your rows with separate_rows() 5.3.3 Go from implicit to explicit missing values with complete(), expand(), crossing() and nesting() 5.3.4 fill() and full_seq() full_seq(c(as.Date(&quot;2018-08-01&quot;), as.Date(&quot;2018-08-10&quot;)), 1) ## [1] &quot;2018-08-01&quot; &quot;2018-08-02&quot; &quot;2018-08-03&quot; &quot;2018-08-04&quot; &quot;2018-08-05&quot; ## [6] &quot;2018-08-06&quot; &quot;2018-08-07&quot; &quot;2018-08-08&quot; &quot;2018-08-09&quot; &quot;2018-08-10&quot; That was it for a first introduction to {tidyr}. Other useful {tidyr} functions are coming, but for now, let’s learn about scoped verbs. 5.4 Scoped {tidyverse} verbs Scoped verbs are special versions of the verbs you are now familiar with. 5.4.1 filter_() filter() is not the only filtering verb there is. Suppose that we have a condition that we want to use to filter out a lot of columns at once. For example, for every column that is of type numeric, keep only the lines where the condition value &gt; -8 is satisfied. The next line does that: gasoline %&gt;% filter_if( ~all(is.numeric(.)), all_vars(. &gt; -8)) ## # A tibble: 30 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 CANADA 1972 4.89 -5.44 -1.10 -7.99 ## 2 CANADA 1973 4.90 -5.41 -1.13 -7.94 ## 3 CANADA 1974 4.89 -5.42 -1.12 -7.90 ## 4 CANADA 1975 4.89 -5.38 -1.19 -7.87 ## 5 CANADA 1976 4.84 -5.36 -1.06 -7.81 ## 6 CANADA 1977 4.81 -5.34 -1.07 -7.77 ## 7 CANADA 1978 4.86 -5.31 -1.07 -7.79 ## 8 GERMANY 1978 3.88 -5.56 -0.628 -7.95 ## 9 SWEDEN 1975 3.97 -7.68 -2.77 -7.99 ## 10 SWEDEN 1976 3.98 -7.67 -2.82 -7.96 ## # ... with 20 more rows It’s a bit more complicated than before. filter_if() needs 3 arguments to work; the data, a predicate function (a function that returns TRUE, or FALSE) which will select the columns we want to work on, and then the condition. The condition can be applied to all the columns that were selected by the predicate function (hence the all_vars()) or only to at least one (you’d use any_vars() then). Try to change the condition, or the predicate function, to figure out how filter_if() works. The dot is a placeholder that stands for whatever columns where selected. filter_at() works differently; it allows the user to filter columns by position: gasoline %&gt;% filter_at(vars(ends_with(&quot;p&quot;)), all_vars(. &gt; -8)) ## # A tibble: 30 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 CANADA 1972 4.89 -5.44 -1.10 -7.99 ## 2 CANADA 1973 4.90 -5.41 -1.13 -7.94 ## 3 CANADA 1974 4.89 -5.42 -1.12 -7.90 ## 4 CANADA 1975 4.89 -5.38 -1.19 -7.87 ## 5 CANADA 1976 4.84 -5.36 -1.06 -7.81 ## 6 CANADA 1977 4.81 -5.34 -1.07 -7.77 ## 7 CANADA 1978 4.86 -5.31 -1.07 -7.79 ## 8 GERMANY 1978 3.88 -5.56 -0.628 -7.95 ## 9 SWEDEN 1975 3.97 -7.68 -2.77 -7.99 ## 10 SWEDEN 1976 3.98 -7.67 -2.82 -7.96 ## # ... with 20 more rows end_with() is a helper function that we are going to use a lot (as well as starts_with() and some others, you’ll see..). So the above line means “for the columns whose name end with a ‘p’ only keep the lines where, for all the selected columns, the values are strictly superior to -8”. Again, this is not very easy the first time you deal with that, so play around with it for a bit. filter_all(), as the name implies, considers all variables for the filtering step. filter_if() and filter_at() are very useful when you have very large datasets with a lot of variables and you want to apply a filtering function only to a subset of them. filter_all() is useful if, for example, you only want to keep the positive values for all the columns. 5.4.2 select_() The same can be achieved with select_at(): gasoline %&gt;% select_at(vars(starts_with(&quot;l&quot;))) ## # A tibble: 342 x 4 ## lgaspcar lincomep lrpmg lcarpcap ## * &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 4.17 -6.47 -0.335 -9.77 ## 2 4.10 -6.43 -0.351 -9.61 ## 3 4.07 -6.41 -0.380 -9.46 ## 4 4.06 -6.37 -0.414 -9.34 ## 5 4.04 -6.32 -0.445 -9.24 ## 6 4.03 -6.29 -0.497 -9.12 ## 7 4.05 -6.25 -0.467 -9.02 ## 8 4.05 -6.23 -0.506 -8.93 ## 9 4.05 -6.21 -0.522 -8.85 ## 10 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows select_at() can be quite useful if you know the position of the columns you’re interested in: gasoline %&gt;% select_at(vars(c(1,2,5))) ## # A tibble: 342 x 3 ## country year lrpmg ## * &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 -0.335 ## 2 AUSTRIA 1961 -0.351 ## 3 AUSTRIA 1962 -0.380 ## 4 AUSTRIA 1963 -0.414 ## 5 AUSTRIA 1964 -0.445 ## 6 AUSTRIA 1965 -0.497 ## 7 AUSTRIA 1966 -0.467 ## 8 AUSTRIA 1967 -0.506 ## 9 AUSTRIA 1968 -0.522 ## 10 AUSTRIA 1969 -0.559 ## # ... with 332 more rows This also works with filter_at() by the way. select_if() makes it easy to select columns that satisfy a criterium: gasoline %&gt;% select_if(is.numeric) ## # A tibble: 342 x 5 ## year lgaspcar lincomep lrpmg lcarpcap ## * &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1960 4.17 -6.47 -0.335 -9.77 ## 2 1961 4.10 -6.43 -0.351 -9.61 ## 3 1962 4.07 -6.41 -0.380 -9.46 ## 4 1963 4.06 -6.37 -0.414 -9.34 ## 5 1964 4.04 -6.32 -0.445 -9.24 ## 6 1965 4.03 -6.29 -0.497 -9.12 ## 7 1966 4.05 -6.25 -0.467 -9.02 ## 8 1967 4.05 -6.23 -0.506 -8.93 ## 9 1968 4.05 -6.21 -0.522 -8.85 ## 10 1969 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows You can even pass a further function to select_if() that will be applied to the selected columns: gasoline %&gt;% select_if(is.numeric, toupper) ## # A tibble: 342 x 5 ## YEAR LGASPCAR LINCOMEP LRPMG LCARPCAP ## * &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1960 4.17 -6.47 -0.335 -9.77 ## 2 1961 4.10 -6.43 -0.351 -9.61 ## 3 1962 4.07 -6.41 -0.380 -9.46 ## 4 1963 4.06 -6.37 -0.414 -9.34 ## 5 1964 4.04 -6.32 -0.445 -9.24 ## 6 1965 4.03 -6.29 -0.497 -9.12 ## 7 1966 4.05 -6.25 -0.467 -9.02 ## 8 1967 4.05 -6.23 -0.506 -8.93 ## 9 1968 4.05 -6.21 -0.522 -8.85 ## 10 1969 4.05 -6.15 -0.559 -8.79 ## # ... with 332 more rows 5.4.3 group_by_() 5.4.4 summarise_() Just like for filter() and select(), summarise() comes with scoped versions: gasoline %&gt;% group_by(country) %&gt;% summarise_at(vars(starts_with(&quot;l&quot;)), mean) ## # A tibble: 18 x 5 ## country lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 -6.12 -0.486 -8.85 ## 2 BELGIUM 3.92 -5.85 -0.326 -8.63 ## 3 CANADA 4.86 -5.58 -1.05 -8.08 ## 4 DENMARK 4.19 -5.76 -0.358 -8.58 ## 5 FRANCE 3.82 -5.87 -0.253 -8.45 ## 6 GERMANY 3.89 -5.85 -0.517 -8.51 ## 7 GREECE 4.88 -6.61 -0.0339 -10.8 ## 8 IRELAND 4.23 -6.44 -0.348 -9.04 ## 9 ITALY 3.73 -6.35 -0.152 -8.83 ## 10 JAPAN 4.70 -6.25 -0.287 -9.95 ## 11 NETHERLA 4.08 -5.92 -0.370 -8.82 ## 12 NORWAY 4.11 -5.75 -0.278 -8.77 ## 13 SPAIN 4.06 -5.63 0.739 -9.90 ## 14 SWEDEN 4.01 -7.82 -2.71 -8.25 ## 15 SWITZERL 4.24 -5.93 -0.902 -8.54 ## 16 TURKEY 5.77 -7.34 -0.422 -12.5 ## 17 U.K. 3.98 -6.02 -0.459 -8.55 ## 18 U.S.A. 4.82 -5.45 -1.21 -7.78 See how I managed to summarise every variable in one simple call to summarise_at()? Simply by using vars() and specifying that I was interested in the ones that started with “l” and then I specified the function I wanted. But what if I wanted to use more than one function to summarise the data? Very easy: gasoline %&gt;% group_by(country) %&gt;% summarise_at(vars(starts_with(&quot;l&quot;)), funs(mean, sd, max, min)) ## # A tibble: 18 x 17 ## country lgaspcar_mean lincomep_mean lrpmg_mean lcarpcap_mean lgaspcar_sd ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 -6.12 -0.486 -8.85 0.0693 ## 2 BELGIUM 3.92 -5.85 -0.326 -8.63 0.103 ## 3 CANADA 4.86 -5.58 -1.05 -8.08 0.0262 ## 4 DENMARK 4.19 -5.76 -0.358 -8.58 0.158 ## 5 FRANCE 3.82 -5.87 -0.253 -8.45 0.0499 ## 6 GERMANY 3.89 -5.85 -0.517 -8.51 0.0239 ## 7 GREECE 4.88 -6.61 -0.0339 -10.8 0.255 ## 8 IRELAND 4.23 -6.44 -0.348 -9.04 0.0437 ## 9 ITALY 3.73 -6.35 -0.152 -8.83 0.220 ## 10 JAPAN 4.70 -6.25 -0.287 -9.95 0.684 ## 11 NETHER… 4.08 -5.92 -0.370 -8.82 0.286 ## 12 NORWAY 4.11 -5.75 -0.278 -8.77 0.123 ## 13 SPAIN 4.06 -5.63 0.739 -9.90 0.317 ## 14 SWEDEN 4.01 -7.82 -2.71 -8.25 0.0364 ## 15 SWITZE… 4.24 -5.93 -0.902 -8.54 0.102 ## 16 TURKEY 5.77 -7.34 -0.422 -12.5 0.329 ## 17 U.K. 3.98 -6.02 -0.459 -8.55 0.0479 ## 18 U.S.A. 4.82 -5.45 -1.21 -7.78 0.0219 ## # ... with 11 more variables: lincomep_sd &lt;dbl&gt;, lrpmg_sd &lt;dbl&gt;, ## # lcarpcap_sd &lt;dbl&gt;, lgaspcar_max &lt;dbl&gt;, lincomep_max &lt;dbl&gt;, ## # lrpmg_max &lt;dbl&gt;, lcarpcap_max &lt;dbl&gt;, lgaspcar_min &lt;dbl&gt;, ## # lincomep_min &lt;dbl&gt;, lrpmg_min &lt;dbl&gt;, lcarpcap_min &lt;dbl&gt; But maybe you’re just interested in descriptive statistics for some variables, but not all those that start with “l”? What if you want to use another pattern? Easy to do with the contains() helper: gasoline %&gt;% group_by(country) %&gt;% summarise_at(vars(dplyr::contains(&quot;car&quot;)), funs(mean, sd, max, min)) ## # A tibble: 18 x 9 ## country lgaspcar_mean lcarpcap_mean lgaspcar_sd lcarpcap_sd lgaspcar_max ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 -8.85 0.0693 0.473 4.20 ## 2 BELGIUM 3.92 -8.63 0.103 0.417 4.16 ## 3 CANADA 4.86 -8.08 0.0262 0.195 4.90 ## 4 DENMARK 4.19 -8.58 0.158 0.349 4.50 ## 5 FRANCE 3.82 -8.45 0.0499 0.344 3.91 ## 6 GERMANY 3.89 -8.51 0.0239 0.406 3.93 ## 7 GREECE 4.88 -10.8 0.255 0.839 5.38 ## 8 IRELAND 4.23 -9.04 0.0437 0.345 4.33 ## 9 ITALY 3.73 -8.83 0.220 0.639 4.05 ## 10 JAPAN 4.70 -9.95 0.684 1.20 6.00 ## 11 NETHER… 4.08 -8.82 0.286 0.617 4.65 ## 12 NORWAY 4.11 -8.77 0.123 0.438 4.44 ## 13 SPAIN 4.06 -9.90 0.317 0.960 4.75 ## 14 SWEDEN 4.01 -8.25 0.0364 0.242 4.07 ## 15 SWITZE… 4.24 -8.54 0.102 0.378 4.44 ## 16 TURKEY 5.77 -12.5 0.329 0.751 6.16 ## 17 U.K. 3.98 -8.55 0.0479 0.281 4.10 ## 18 U.S.A. 4.82 -7.78 0.0219 0.162 4.86 ## # ... with 3 more variables: lcarpcap_max &lt;dbl&gt;, lgaspcar_min &lt;dbl&gt;, ## # lcarpcap_min &lt;dbl&gt; I used dplyr::contains() instead of simply contains() because there’s also a purrr::contains(). If you load purrr after dplyr, contains() will actually be purrr::contains() and not dplyr::contains() which causes the above code to fail. There’s also summarise_if(): gasoline %&gt;% group_by(country) %&gt;% summarise_if(is.double, funs(mean, sd, min, max)) ## # A tibble: 18 x 17 ## country lgaspcar_mean lincomep_mean lrpmg_mean lcarpcap_mean lgaspcar_sd ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 -6.12 -0.486 -8.85 0.0693 ## 2 BELGIUM 3.92 -5.85 -0.326 -8.63 0.103 ## 3 CANADA 4.86 -5.58 -1.05 -8.08 0.0262 ## 4 DENMARK 4.19 -5.76 -0.358 -8.58 0.158 ## 5 FRANCE 3.82 -5.87 -0.253 -8.45 0.0499 ## 6 GERMANY 3.89 -5.85 -0.517 -8.51 0.0239 ## 7 GREECE 4.88 -6.61 -0.0339 -10.8 0.255 ## 8 IRELAND 4.23 -6.44 -0.348 -9.04 0.0437 ## 9 ITALY 3.73 -6.35 -0.152 -8.83 0.220 ## 10 JAPAN 4.70 -6.25 -0.287 -9.95 0.684 ## 11 NETHER… 4.08 -5.92 -0.370 -8.82 0.286 ## 12 NORWAY 4.11 -5.75 -0.278 -8.77 0.123 ## 13 SPAIN 4.06 -5.63 0.739 -9.90 0.317 ## 14 SWEDEN 4.01 -7.82 -2.71 -8.25 0.0364 ## 15 SWITZE… 4.24 -5.93 -0.902 -8.54 0.102 ## 16 TURKEY 5.77 -7.34 -0.422 -12.5 0.329 ## 17 U.K. 3.98 -6.02 -0.459 -8.55 0.0479 ## 18 U.S.A. 4.82 -5.45 -1.21 -7.78 0.0219 ## # ... with 11 more variables: lincomep_sd &lt;dbl&gt;, lrpmg_sd &lt;dbl&gt;, ## # lcarpcap_sd &lt;dbl&gt;, lgaspcar_min &lt;dbl&gt;, lincomep_min &lt;dbl&gt;, ## # lrpmg_min &lt;dbl&gt;, lcarpcap_min &lt;dbl&gt;, lgaspcar_max &lt;dbl&gt;, ## # lincomep_max &lt;dbl&gt;, lrpmg_max &lt;dbl&gt;, lcarpcap_max &lt;dbl&gt; This allows you to summarise every column that contain real numbers (if you use is.numeric() instead, year will also be summarised, which is not really interesting). To go faster, you can also use summarise_all(): gasoline %&gt;% select(-year) %&gt;% group_by(country) %&gt;% summarise_all(funs(mean, sd, min, max)) ## # A tibble: 18 x 17 ## country lgaspcar_mean lincomep_mean lrpmg_mean lcarpcap_mean lgaspcar_sd ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 4.06 -6.12 -0.486 -8.85 0.0693 ## 2 BELGIUM 3.92 -5.85 -0.326 -8.63 0.103 ## 3 CANADA 4.86 -5.58 -1.05 -8.08 0.0262 ## 4 DENMARK 4.19 -5.76 -0.358 -8.58 0.158 ## 5 FRANCE 3.82 -5.87 -0.253 -8.45 0.0499 ## 6 GERMANY 3.89 -5.85 -0.517 -8.51 0.0239 ## 7 GREECE 4.88 -6.61 -0.0339 -10.8 0.255 ## 8 IRELAND 4.23 -6.44 -0.348 -9.04 0.0437 ## 9 ITALY 3.73 -6.35 -0.152 -8.83 0.220 ## 10 JAPAN 4.70 -6.25 -0.287 -9.95 0.684 ## 11 NETHER… 4.08 -5.92 -0.370 -8.82 0.286 ## 12 NORWAY 4.11 -5.75 -0.278 -8.77 0.123 ## 13 SPAIN 4.06 -5.63 0.739 -9.90 0.317 ## 14 SWEDEN 4.01 -7.82 -2.71 -8.25 0.0364 ## 15 SWITZE… 4.24 -5.93 -0.902 -8.54 0.102 ## 16 TURKEY 5.77 -7.34 -0.422 -12.5 0.329 ## 17 U.K. 3.98 -6.02 -0.459 -8.55 0.0479 ## 18 U.S.A. 4.82 -5.45 -1.21 -7.78 0.0219 ## # ... with 11 more variables: lincomep_sd &lt;dbl&gt;, lrpmg_sd &lt;dbl&gt;, ## # lcarpcap_sd &lt;dbl&gt;, lgaspcar_min &lt;dbl&gt;, lincomep_min &lt;dbl&gt;, ## # lrpmg_min &lt;dbl&gt;, lcarpcap_min &lt;dbl&gt;, lgaspcar_max &lt;dbl&gt;, ## # lincomep_max &lt;dbl&gt;, lrpmg_max &lt;dbl&gt;, lcarpcap_max &lt;dbl&gt; I removed the year variable because it’s not a variable for which we want to have descriptive statistics. 5.4.5 mutate_() mutate() and transmute() also come with scoped version: gasoline %&gt;% mutate_if(is.double, exp) ## # A tibble: 342 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 64.9 0.00154 0.716 0.0000573 ## 2 AUSTRIA 1961 60.4 0.00162 0.704 0.0000671 ## 3 AUSTRIA 1962 58.7 0.00165 0.684 0.0000781 ## 4 AUSTRIA 1963 57.9 0.00171 0.661 0.0000876 ## 5 AUSTRIA 1964 56.7 0.00180 0.641 0.0000973 ## 6 AUSTRIA 1965 56.5 0.00185 0.608 0.000109 ## 7 AUSTRIA 1966 57.3 0.00193 0.627 0.000121 ## 8 AUSTRIA 1967 57.6 0.00196 0.603 0.000132 ## 9 AUSTRIA 1968 57.1 0.00202 0.593 0.000144 ## 10 AUSTRIA 1969 57.2 0.00213 0.572 0.000152 ## # ... with 332 more rows gasoline %&gt;% mutate_at(vars(starts_with(&quot;l&quot;)), exp) ## # A tibble: 342 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AUSTRIA 1960 64.9 0.00154 0.716 0.0000573 ## 2 AUSTRIA 1961 60.4 0.00162 0.704 0.0000671 ## 3 AUSTRIA 1962 58.7 0.00165 0.684 0.0000781 ## 4 AUSTRIA 1963 57.9 0.00171 0.661 0.0000876 ## 5 AUSTRIA 1964 56.7 0.00180 0.641 0.0000973 ## 6 AUSTRIA 1965 56.5 0.00185 0.608 0.000109 ## 7 AUSTRIA 1966 57.3 0.00193 0.627 0.000121 ## 8 AUSTRIA 1967 57.6 0.00196 0.603 0.000132 ## 9 AUSTRIA 1968 57.1 0.00202 0.593 0.000144 ## 10 AUSTRIA 1969 57.2 0.00213 0.572 0.000152 ## # ... with 332 more rows gasoline %&gt;% mutate_all(as.character) ## # A tibble: 342 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AUSTRIA 1960 4.173244195 -6.474277179 -0.334547613 -9.766839569 ## 2 AUSTRIA 1961 4.1009891049 -6.426005835 -0.351327614 -9.608621845 ## 3 AUSTRIA 1962 4.0731765511 -6.407308295 -0.379517692 -9.457256552 ## 4 AUSTRIA 1963 4.0595091239 -6.370678539 -0.414251392 -9.343154947 ## 5 AUSTRIA 1964 4.037688787 -6.322246805 -0.445335362 -9.237739346 ## 6 AUSTRIA 1965 4.033983285 -6.294667914 -0.497060662 -9.123903477 ## 7 AUSTRIA 1966 4.0475365589 -6.252545451 -0.466837731 -9.019822048 ## 8 AUSTRIA 1967 4.0529106939 -6.234580709 -0.505883405 -8.934402537 ## 9 AUSTRIA 1968 4.045507048 -6.206894403 -0.522412545 -8.847967407 ## 10 AUSTRIA 1969 4.0463547891 -6.153139668 -0.559110514 -8.788686207 ## # ... with 332 more rows 5.5 Other useful {tidyverse} functions 5.5.1 if_else(), case_when() and recode() The two helper functions I use the most are probably if_else() and case_when. These two functions, combined with mutate() make it easy to create a new variable conditonally on the values of other variables. For instance, we might want to have a dummy that equals 1 if a country in the European Union (to simplify, say as of 2017) and 0 if not. First let’s create a list of countries that are in the EU: eu_countries &lt;- c(&quot;austria&quot;, &quot;belgium&quot;, &quot;bulgaria&quot;, &quot;croatia&quot;, &quot;republic of cyprus&quot;, &quot;czech republic&quot;, &quot;denmark&quot;, &quot;estonia&quot;, &quot;finland&quot;, &quot;france&quot;, &quot;germany&quot;, &quot;greece&quot;, &quot;hungary&quot;, &quot;ireland&quot;, &quot;italy&quot;, &quot;latvia&quot;, &quot;lithuania&quot;, &quot;luxembourg&quot;, &quot;malta&quot;, &quot;netherla&quot;, &quot;poland&quot;, &quot;portugal&quot;, &quot;romania&quot;, &quot;slovakia&quot;, &quot;slovenia&quot;, &quot;spain&quot;, &quot;sweden&quot;, &quot;u.k.&quot;) I’ve had to change “netherlands” to “netherla” because that’s how the country is called in the data. Now let’s create a dummy variable that equals 1 for EU countries, ind 0 for the others: gasoline %&gt;% mutate(country = tolower(country)) %&gt;% mutate(in_eu = if_else(country %in% eu_countries, 1, 0)) ## # A tibble: 342 x 7 ## country year lgaspcar lincomep lrpmg lcarpcap in_eu ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 1 ## 2 austria 1961 4.10 -6.43 -0.351 -9.61 1 ## 3 austria 1962 4.07 -6.41 -0.380 -9.46 1 ## 4 austria 1963 4.06 -6.37 -0.414 -9.34 1 ## 5 austria 1964 4.04 -6.32 -0.445 -9.24 1 ## 6 austria 1965 4.03 -6.29 -0.497 -9.12 1 ## 7 austria 1966 4.05 -6.25 -0.467 -9.02 1 ## 8 austria 1967 4.05 -6.23 -0.506 -8.93 1 ## 9 austria 1968 4.05 -6.21 -0.522 -8.85 1 ## 10 austria 1969 4.05 -6.15 -0.559 -8.79 1 ## # ... with 332 more rows Instead of 1 and 0, we can of course use strings (I add filter(year == 1960) at the end to have a better view of what happened): gasoline %&gt;% mutate(country = tolower(country)) %&gt;% mutate(in_eu = if_else(country %in% eu_countries, &quot;yes&quot;, &quot;no&quot;)) %&gt;% filter(year == 1960) ## # A tibble: 18 x 7 ## country year lgaspcar lincomep lrpmg lcarpcap in_eu ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 yes ## 2 belgium 1960 4.16 -6.22 -0.166 -9.41 yes ## 3 canada 1960 4.86 -5.89 -0.972 -8.38 no ## 4 denmark 1960 4.50 -6.06 -0.196 -9.33 yes ## 5 france 1960 3.91 -6.26 -0.0196 -9.15 yes ## 6 germany 1960 3.92 -6.16 -0.186 -9.34 yes ## 7 greece 1960 5.04 -7.16 -0.0835 -12.2 yes ## 8 ireland 1960 4.27 -6.72 -0.0765 -9.70 yes ## 9 italy 1960 4.05 -6.73 0.165 -10.1 yes ## 10 japan 1960 6.00 -6.99 -0.145 -12.2 no ## 11 netherla 1960 4.65 -6.22 -0.201 -10.00 yes ## 12 norway 1960 4.44 -6.09 -0.140 -9.68 no ## 13 spain 1960 4.75 -6.17 1.13 -11.6 yes ## 14 sweden 1960 4.06 -8.07 -2.52 -8.74 yes ## 15 switzerl 1960 4.40 -6.16 -0.823 -9.26 no ## 16 turkey 1960 6.13 -7.80 -0.253 -13.5 no ## 17 u.k. 1960 4.10 -6.19 -0.391 -9.12 yes ## 18 u.s.a. 1960 4.82 -5.70 -1.12 -8.02 no I think that if_else() is fairly straightforward, especially if you know ifelse() already. You might be wondering what is the difference between these two. if_else() is stricter than ifelse() and does not do type conversion. Compare the two next lines: ifelse(1 == 1, &quot;0&quot;, 1) ## [1] &quot;0&quot; if_else(1 == 1, &quot;0&quot;, 1) Error: `false` must be type string, not double Type conversion, especially without a warning is very dangerous. if_else()’s behaviour which consists in failing as soon as possble avoids a lot of pain and suffering, especially when programming non-interactively. if_else() also accepts an optional argument, that allows you to specify what should be returned in case of NA: if_else(1 &lt;= NA, 0, 1, 999) ## [1] 999 # Or if_else(1 &lt;= NA, 0, 1, NA_real_) ## [1] NA case_when() can be seen as a generalization of if_else(). Whenever you want to use multiple if_else()s, that’s when you know you should use case_when() (I’m adding the filter at the end for the same reason as before, to see the output better): gasoline %&gt;% mutate(country = tolower(country)) %&gt;% mutate(region = case_when( country %in% c(&quot;france&quot;, &quot;italy&quot;, &quot;turkey&quot;, &quot;greece&quot;, &quot;spain&quot;) ~ &quot;mediterranean&quot;, country %in% c(&quot;germany&quot;, &quot;austria&quot;, &quot;switzerl&quot;, &quot;belgium&quot;, &quot;netherla&quot;) ~ &quot;central europe&quot;, country %in% c(&quot;canada&quot;, &quot;u.s.a.&quot;, &quot;u.k.&quot;, &quot;ireland&quot;) ~ &quot;anglosphere&quot;, country %in% c(&quot;denmark&quot;, &quot;norway&quot;, &quot;sweden&quot;) ~ &quot;nordic&quot;, country %in% c(&quot;japan&quot;) ~ &quot;asia&quot;)) %&gt;% filter(year == 1960) ## # A tibble: 18 x 7 ## country year lgaspcar lincomep lrpmg lcarpcap region ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 central europe ## 2 belgium 1960 4.16 -6.22 -0.166 -9.41 central europe ## 3 canada 1960 4.86 -5.89 -0.972 -8.38 anglosphere ## 4 denmark 1960 4.50 -6.06 -0.196 -9.33 nordic ## 5 france 1960 3.91 -6.26 -0.0196 -9.15 mediterranean ## 6 germany 1960 3.92 -6.16 -0.186 -9.34 central europe ## 7 greece 1960 5.04 -7.16 -0.0835 -12.2 mediterranean ## 8 ireland 1960 4.27 -6.72 -0.0765 -9.70 anglosphere ## 9 italy 1960 4.05 -6.73 0.165 -10.1 mediterranean ## 10 japan 1960 6.00 -6.99 -0.145 -12.2 asia ## 11 netherla 1960 4.65 -6.22 -0.201 -10.00 central europe ## 12 norway 1960 4.44 -6.09 -0.140 -9.68 nordic ## 13 spain 1960 4.75 -6.17 1.13 -11.6 mediterranean ## 14 sweden 1960 4.06 -8.07 -2.52 -8.74 nordic ## 15 switzerl 1960 4.40 -6.16 -0.823 -9.26 central europe ## 16 turkey 1960 6.13 -7.80 -0.253 -13.5 mediterranean ## 17 u.k. 1960 4.10 -6.19 -0.391 -9.12 anglosphere ## 18 u.s.a. 1960 4.82 -5.70 -1.12 -8.02 anglosphere If all you want is to recode values, you can use recode(). For example, the Netherlands is written as “NETHERLA” in the which is quite ugly. Same for Switzerland: gasoline &lt;- gasoline %&gt;% mutate(country = tolower(country)) %&gt;% mutate(country = recode(country, &quot;netherla&quot; = &quot;netherlands&quot;, &quot;switzerl&quot; = &quot;switzerland&quot;)) I saved the data with these changes as they will become useful in the future. Let’s take a look at the data: gasoline %&gt;% filter(country %in% c(&quot;netherlands&quot;, &quot;switzerland&quot;), year == 1960) ## # A tibble: 2 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 netherlands 1960 4.65 -6.22 -0.201 -10.00 ## 2 switzerland 1960 4.40 -6.16 -0.823 -9.26 5.5.2 lead() and lag() lead() and lag() are especially useful in econometrics. When I was doing my masters, in 4 B.d. (Before dplyr) lagging variables in panel data was quite tricky. Now, with dplyr it’s really very easy: gasoline %&gt;% group_by(country) %&gt;% mutate(lag_lgaspcar = lag(lgaspcar)) %&gt;% mutate(lead_lgaspcar = lead(lgaspcar)) %&gt;% filter(year %in% seq(1960, 1963)) ## # A tibble: 72 x 8 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap lag_lgaspcar ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 NA ## 2 austria 1961 4.10 -6.43 -0.351 -9.61 4.17 ## 3 austria 1962 4.07 -6.41 -0.380 -9.46 4.10 ## 4 austria 1963 4.06 -6.37 -0.414 -9.34 4.07 ## 5 belgium 1960 4.16 -6.22 -0.166 -9.41 NA ## 6 belgium 1961 4.12 -6.18 -0.172 -9.30 4.16 ## 7 belgium 1962 4.08 -6.13 -0.222 -9.22 4.12 ## 8 belgium 1963 4.00 -6.09 -0.250 -9.11 4.08 ## 9 canada 1960 4.86 -5.89 -0.972 -8.38 NA ## 10 canada 1961 4.83 -5.88 -0.972 -8.35 4.86 ## # ... with 62 more rows, and 1 more variable: lead_lgaspcar &lt;dbl&gt; To lag every variable, remember that you can use mutate_if(): gasoline %&gt;% group_by(country) %&gt;% mutate_if(is.double, lag) %&gt;% filter(year %in% seq(1960, 1963)) ## # A tibble: 72 x 6 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 austria 1960 NA NA NA NA ## 2 austria 1961 4.17 -6.47 -0.335 -9.77 ## 3 austria 1962 4.10 -6.43 -0.351 -9.61 ## 4 austria 1963 4.07 -6.41 -0.380 -9.46 ## 5 belgium 1960 NA NA NA NA ## 6 belgium 1961 4.16 -6.22 -0.166 -9.41 ## 7 belgium 1962 4.12 -6.18 -0.172 -9.30 ## 8 belgium 1963 4.08 -6.13 -0.222 -9.22 ## 9 canada 1960 NA NA NA NA ## 10 canada 1961 4.86 -5.89 -0.972 -8.38 ## # ... with 62 more rows you can replace lag() with lead(), but just keep in mind that the columns get transformed in place. 5.5.3 ntile() The last helper function I will discuss is ntile(). There are some other, so do read mutate()’s documentation with help(mutate)! If you need quantiles, you need ntile(). Let’s see how it works: gasoline %&gt;% mutate(quintile = ntile(lgaspcar, 5)) %&gt;% mutate(decile = ntile(lgaspcar, 10)) %&gt;% select(country, year, lgaspcar, quintile, decile) ## # A tibble: 342 x 5 ## country year lgaspcar quintile decile ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; ## 1 austria 1960 4.17 3 6 ## 2 austria 1961 4.10 3 6 ## 3 austria 1962 4.07 3 5 ## 4 austria 1963 4.06 3 5 ## 5 austria 1964 4.04 3 5 ## 6 austria 1965 4.03 3 5 ## 7 austria 1966 4.05 3 5 ## 8 austria 1967 4.05 3 5 ## 9 austria 1968 4.05 3 5 ## 10 austria 1969 4.05 3 5 ## # ... with 332 more rows quintile and decile do not hold the values but the quantile the value lies in. If you want to have a column that contains the median for instance, you can use good ol’ quantile(): gasoline %&gt;% group_by(country) %&gt;% mutate(median = quantile(lgaspcar, 0.5)) %&gt;% # quantile(x, 0.5) is equivalent to median(x) filter(year == 1960) %&gt;% select(country, year, median) ## # A tibble: 18 x 3 ## # Groups: country [18] ## country year median ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 austria 1960 4.05 ## 2 belgium 1960 3.88 ## 3 canada 1960 4.86 ## 4 denmark 1960 4.16 ## 5 france 1960 3.81 ## 6 germany 1960 3.89 ## 7 greece 1960 4.89 ## 8 ireland 1960 4.22 ## 9 italy 1960 3.74 ## 10 japan 1960 4.52 ## 11 netherlands 1960 3.99 ## 12 norway 1960 4.08 ## 13 spain 1960 3.99 ## 14 sweden 1960 4.00 ## 15 switzerland 1960 4.26 ## 16 turkey 1960 5.72 ## 17 u.k. 1960 3.98 ## 18 u.s.a. 1960 4.81 5.5.4 arrange() arrange() re-orders the whole tibble according to values of the supplied variable: gasoline %&gt;% arrange(lgaspcar) ## # A tibble: 342 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 italy 1977 3.38 -6.10 0.164 -8.15 ## 2 italy 1978 3.39 -6.08 0.0348 -8.11 ## 3 italy 1976 3.43 -6.12 0.103 -8.17 ## 4 italy 1974 3.50 -6.13 -0.223 -8.26 ## 5 italy 1975 3.52 -6.17 -0.0327 -8.22 ## 6 spain 1978 3.62 -5.29 0.621 -8.63 ## 7 italy 1972 3.63 -6.21 -0.215 -8.38 ## 8 italy 1971 3.65 -6.22 -0.148 -8.47 ## 9 spain 1977 3.65 -5.30 0.526 -8.73 ## 10 italy 1973 3.65 -6.16 -0.325 -8.32 ## # ... with 332 more rows If you want to re-order the tibble in descending order of the variable: gasoline %&gt;% arrange(desc(lgaspcar)) ## # A tibble: 342 x 6 ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 turkey 1966 6.16 -7.51 -0.356 -13.0 ## 2 turkey 1960 6.13 -7.80 -0.253 -13.5 ## 3 turkey 1961 6.11 -7.79 -0.343 -13.4 ## 4 turkey 1962 6.08 -7.84 -0.408 -13.2 ## 5 turkey 1968 6.08 -7.42 -0.365 -12.8 ## 6 turkey 1963 6.08 -7.63 -0.225 -13.3 ## 7 turkey 1964 6.06 -7.63 -0.252 -13.2 ## 8 turkey 1967 6.04 -7.46 -0.335 -12.8 ## 9 japan 1960 6.00 -6.99 -0.145 -12.2 ## 10 turkey 1965 5.82 -7.62 -0.293 -12.9 ## # ... with 332 more rows arrange’s documentation alerts the user that re-ording by group is only possible by explicitely specifying an option: gasoline %&gt;% filter(year %in% seq(1960, 1963)) %&gt;% group_by(country) %&gt;% arrange(desc(lgaspcar), .by_group = TRUE) ## # A tibble: 72 x 6 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 ## 2 austria 1961 4.10 -6.43 -0.351 -9.61 ## 3 austria 1962 4.07 -6.41 -0.380 -9.46 ## 4 austria 1963 4.06 -6.37 -0.414 -9.34 ## 5 belgium 1960 4.16 -6.22 -0.166 -9.41 ## 6 belgium 1961 4.12 -6.18 -0.172 -9.30 ## 7 belgium 1962 4.08 -6.13 -0.222 -9.22 ## 8 belgium 1963 4.00 -6.09 -0.250 -9.11 ## 9 canada 1960 4.86 -5.89 -0.972 -8.38 ## 10 canada 1962 4.85 -5.84 -0.979 -8.32 ## # ... with 62 more rows 5.5.5 tally() and count() tally() and count() count the number of observations in your data. I believe count() is the more useful of the two, as it counts the number of observations within a group that you can provide: gasoline %&gt;% count(country) ## # A tibble: 18 x 2 ## country n ## &lt;chr&gt; &lt;int&gt; ## 1 austria 19 ## 2 belgium 19 ## 3 canada 19 ## 4 denmark 19 ## 5 france 19 ## 6 germany 19 ## 7 greece 19 ## 8 ireland 19 ## 9 italy 19 ## 10 japan 19 ## 11 netherlands 19 ## 12 norway 19 ## 13 spain 19 ## 14 sweden 19 ## 15 switzerland 19 ## 16 turkey 19 ## 17 u.k. 19 ## 18 u.s.a. 19 There’s also add_count() which adds the column to the data: gasoline %&gt;% add_count(country) ## # A tibble: 342 x 7 ## country year lgaspcar lincomep lrpmg lcarpcap n ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 19 ## 2 austria 1961 4.10 -6.43 -0.351 -9.61 19 ## 3 austria 1962 4.07 -6.41 -0.380 -9.46 19 ## 4 austria 1963 4.06 -6.37 -0.414 -9.34 19 ## 5 austria 1964 4.04 -6.32 -0.445 -9.24 19 ## 6 austria 1965 4.03 -6.29 -0.497 -9.12 19 ## 7 austria 1966 4.05 -6.25 -0.467 -9.02 19 ## 8 austria 1967 4.05 -6.23 -0.506 -8.93 19 ## 9 austria 1968 4.05 -6.21 -0.522 -8.85 19 ## 10 austria 1969 4.05 -6.15 -0.559 -8.79 19 ## # ... with 332 more rows add_count() is a shortcut for the following code: gasoline %&gt;% group_by(country) %&gt;% mutate(n = n()) ## # A tibble: 342 x 7 ## # Groups: country [18] ## country year lgaspcar lincomep lrpmg lcarpcap n ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 austria 1960 4.17 -6.47 -0.335 -9.77 19 ## 2 austria 1961 4.10 -6.43 -0.351 -9.61 19 ## 3 austria 1962 4.07 -6.41 -0.380 -9.46 19 ## 4 austria 1963 4.06 -6.37 -0.414 -9.34 19 ## 5 austria 1964 4.04 -6.32 -0.445 -9.24 19 ## 6 austria 1965 4.03 -6.29 -0.497 -9.12 19 ## 7 austria 1966 4.05 -6.25 -0.467 -9.02 19 ## 8 austria 1967 4.05 -6.23 -0.506 -8.93 19 ## 9 austria 1968 4.05 -6.21 -0.522 -8.85 19 ## 10 austria 1969 4.05 -6.15 -0.559 -8.79 19 ## # ... with 332 more rows where n() is a dplyr function that can only be used within summarise(), mutate() and filter(). 5.6 Joining tibbles with full_join(), left_join(), right_join() and all the others I will end this section on dplyr with the very useful verbs: the *_join() verbs. Let’s first start by loading another dataset from the plm package. SumHes and let’s convert it to tibble and rename it: data(SumHes, package = &quot;plm&quot;) pwt &lt;- SumHes %&gt;% as_tibble() %&gt;% mutate(country = tolower(country)) Let’s take a quick look at the data: glimpse(pwt) ## Observations: 3,250 ## Variables: 7 ## $ year &lt;int&gt; 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, ... ## $ country &lt;chr&gt; &quot;algeria&quot;, &quot;algeria&quot;, &quot;algeria&quot;, &quot;algeria&quot;, &quot;algeria&quot;,... ## $ opec &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no... ## $ com &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no... ## $ pop &lt;int&gt; 10800, 11016, 11236, 11460, 11690, 11923, 12267, 12622... ## $ gdp &lt;int&gt; 1723, 1599, 1275, 1517, 1589, 1584, 1548, 1600, 1758, ... ## $ sr &lt;dbl&gt; 19.9, 21.1, 15.0, 13.9, 10.6, 11.0, 8.3, 11.3, 15.1, 1... We can merge both gasoline and pwt by country and year, as these two variables are common to both datasets. There are more countries and years in the pwt dataset, so when merging both, and depending on which function you use, you will either have NA’s for the variables where there is no match, or rows that will be dropped. Let’s start with full_join: gas_pwt_full &lt;- gasoline %&gt;% full_join(pwt, by = c(&quot;country&quot;, &quot;year&quot;)) Let’s see which countries and years are included: gas_pwt_full %&gt;% count(country, year) ## # A tibble: 3,269 x 3 ## country year n ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; ## 1 algeria 1960 1 ## 2 algeria 1961 1 ## 3 algeria 1962 1 ## 4 algeria 1963 1 ## 5 algeria 1964 1 ## 6 algeria 1965 1 ## 7 algeria 1966 1 ## 8 algeria 1967 1 ## 9 algeria 1968 1 ## 10 algeria 1969 1 ## # ... with 3,259 more rows As you see, every country and year was included, but what happened for, say, the U.S.S.R? This country is in pwt but not in gasoline at all: gas_pwt_full %&gt;% filter(country == &quot;u.s.s.r.&quot;) ## # A tibble: 26 x 11 ## country year lgaspcar lincomep lrpmg lcarpcap opec com pop gdp ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; ## 1 u.s.s.… 1960 NA NA NA NA no yes 214400 2397 ## 2 u.s.s.… 1961 NA NA NA NA no yes 217896 2542 ## 3 u.s.s.… 1962 NA NA NA NA no yes 221449 2656 ## 4 u.s.s.… 1963 NA NA NA NA no yes 225060 2681 ## 5 u.s.s.… 1964 NA NA NA NA no yes 227571 2854 ## 6 u.s.s.… 1965 NA NA NA NA no yes 230109 3049 ## 7 u.s.s.… 1966 NA NA NA NA no yes 232676 3247 ## 8 u.s.s.… 1967 NA NA NA NA no yes 235272 3454 ## 9 u.s.s.… 1968 NA NA NA NA no yes 237896 3730 ## 10 u.s.s.… 1969 NA NA NA NA no yes 240550 3808 ## # ... with 16 more rows, and 1 more variable: sr &lt;dbl&gt; As you probably guessed, the variables from gasoline that are not included in pwt are filled with NAs. One could remove all these lines and only keep countries for which these variables are not NA everywhere with filter(), but there is a simpler solution: gas_pwt_inner &lt;- gasoline %&gt;% inner_join(pwt, by = c(&quot;country&quot;, &quot;year&quot;)) Let’s use the tabyl() from the janitor packages which is a very nice alternative to the table() function from base R: library(janitor) gas_pwt_inner %&gt;% tabyl(country) ## country n percent ## austria 19 0.05882353 ## belgium 19 0.05882353 ## canada 19 0.05882353 ## denmark 19 0.05882353 ## france 19 0.05882353 ## greece 19 0.05882353 ## ireland 19 0.05882353 ## italy 19 0.05882353 ## japan 19 0.05882353 ## netherlands 19 0.05882353 ## norway 19 0.05882353 ## spain 19 0.05882353 ## sweden 19 0.05882353 ## switzerland 19 0.05882353 ## turkey 19 0.05882353 ## u.k. 19 0.05882353 ## u.s.a. 19 0.05882353 Only countries with values in both datasets were returned. It’s almost every country from gasoline, apart from Germany (called “germany west” in pwt and “germany” in gasoline. I left it as is to provide an example of a country not in pwt). Let’s also look at the variables: glimpse(gas_pwt_inner) ## Observations: 323 ## Variables: 11 ## $ country &lt;chr&gt; &quot;austria&quot;, &quot;austria&quot;, &quot;austria&quot;, &quot;austria&quot;, &quot;austria&quot;... ## $ year &lt;int&gt; 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,... ## $ lgaspcar &lt;dbl&gt; 4.173244, 4.100989, 4.073177, 4.059509, 4.037689, 4.0... ## $ lincomep &lt;dbl&gt; -6.474277, -6.426006, -6.407308, -6.370679, -6.322247... ## $ lrpmg &lt;dbl&gt; -0.3345476, -0.3513276, -0.3795177, -0.4142514, -0.44... ## $ lcarpcap &lt;dbl&gt; -9.766840, -9.608622, -9.457257, -9.343155, -9.237739... ## $ opec &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, n... ## $ com &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, n... ## $ pop &lt;int&gt; 7048, 7087, 7130, 7172, 7215, 7255, 7308, 7338, 7362,... ## $ gdp &lt;int&gt; 5143, 5388, 5481, 5688, 5978, 6144, 6437, 6596, 6847,... ## $ sr &lt;dbl&gt; 24.3, 24.5, 23.3, 22.9, 25.2, 25.2, 26.7, 25.6, 25.7,... The variables from both datasets are in the joined data. Contrast this to semi_join(): gas_pwt_semi &lt;- gasoline %&gt;% semi_join(pwt, by = c(&quot;country&quot;, &quot;year&quot;)) glimpse(gas_pwt_semi) ## Observations: 323 ## Variables: 6 ## $ country &lt;chr&gt; &quot;austria&quot;, &quot;austria&quot;, &quot;austria&quot;, &quot;austria&quot;, &quot;austria&quot;... ## $ year &lt;int&gt; 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,... ## $ lgaspcar &lt;dbl&gt; 4.173244, 4.100989, 4.073177, 4.059509, 4.037689, 4.0... ## $ lincomep &lt;dbl&gt; -6.474277, -6.426006, -6.407308, -6.370679, -6.322247... ## $ lrpmg &lt;dbl&gt; -0.3345476, -0.3513276, -0.3795177, -0.4142514, -0.44... ## $ lcarpcap &lt;dbl&gt; -9.766840, -9.608622, -9.457257, -9.343155, -9.237739... gas_pwt_semi %&gt;% tabyl(country) ## country n percent ## austria 19 0.05882353 ## belgium 19 0.05882353 ## canada 19 0.05882353 ## denmark 19 0.05882353 ## france 19 0.05882353 ## greece 19 0.05882353 ## ireland 19 0.05882353 ## italy 19 0.05882353 ## japan 19 0.05882353 ## netherlands 19 0.05882353 ## norway 19 0.05882353 ## spain 19 0.05882353 ## sweden 19 0.05882353 ## switzerland 19 0.05882353 ## turkey 19 0.05882353 ## u.k. 19 0.05882353 ## u.s.a. 19 0.05882353 Only columns of gasoline are returned, and only rows of gasoline that were matched with rows from pwt. semi_join() is not a commutative operation: pwt_gas_semi &lt;- pwt %&gt;% semi_join(gasoline, by = c(&quot;country&quot;, &quot;year&quot;)) glimpse(pwt_gas_semi) ## Observations: 323 ## Variables: 7 ## $ year &lt;int&gt; 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968, ... ## $ country &lt;chr&gt; &quot;canada&quot;, &quot;canada&quot;, &quot;canada&quot;, &quot;canada&quot;, &quot;canada&quot;, &quot;can... ## $ opec &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no... ## $ com &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no, no... ## $ pop &lt;int&gt; 17910, 18270, 18614, 18963, 19326, 19678, 20049, 20411... ## $ gdp &lt;int&gt; 7258, 7261, 7605, 7876, 8244, 8664, 9093, 9231, 9582, ... ## $ sr &lt;dbl&gt; 22.7, 21.5, 22.1, 21.9, 22.9, 24.8, 25.4, 23.1, 22.6, ... gas_pwt_semi %&gt;% tabyl(country) ## country n percent ## austria 19 0.05882353 ## belgium 19 0.05882353 ## canada 19 0.05882353 ## denmark 19 0.05882353 ## france 19 0.05882353 ## greece 19 0.05882353 ## ireland 19 0.05882353 ## italy 19 0.05882353 ## japan 19 0.05882353 ## netherlands 19 0.05882353 ## norway 19 0.05882353 ## spain 19 0.05882353 ## sweden 19 0.05882353 ## switzerland 19 0.05882353 ## turkey 19 0.05882353 ## u.k. 19 0.05882353 ## u.s.a. 19 0.05882353 The rows are the same, but not the columns. left_join() and right_join() return all the rows from either the dataset that is on the “left” (the first argument of the fonction) or on the “right” (the second argument of the function) but all columns from both datasets. So depending on which countries you’re interested in, you’re going to use either one of these functions: gas_pwt_left &lt;- gasoline %&gt;% left_join(pwt, by = c(&quot;country&quot;, &quot;year&quot;)) gas_pwt_left %&gt;% tabyl(country) ## country n percent ## austria 19 0.05555556 ## belgium 19 0.05555556 ## canada 19 0.05555556 ## denmark 19 0.05555556 ## france 19 0.05555556 ## germany 19 0.05555556 ## greece 19 0.05555556 ## ireland 19 0.05555556 ## italy 19 0.05555556 ## japan 19 0.05555556 ## netherlands 19 0.05555556 ## norway 19 0.05555556 ## spain 19 0.05555556 ## sweden 19 0.05555556 ## switzerland 19 0.05555556 ## turkey 19 0.05555556 ## u.k. 19 0.05555556 ## u.s.a. 19 0.05555556 gas_pwt_right &lt;- gasoline %&gt;% right_join(pwt, by = c(&quot;country&quot;, &quot;year&quot;)) gas_pwt_right %&gt;% tabyl(country) ## country n percent ## algeria 26 0.008 ## angola 26 0.008 ## argentina 26 0.008 ## australia 26 0.008 ## austria 26 0.008 ## bangladesh 26 0.008 ## barbados 26 0.008 ## belgium 26 0.008 ## benin 26 0.008 ## bolivia 26 0.008 ## botswana 26 0.008 ## brazil 26 0.008 ## burkina faso 26 0.008 ## burundi 26 0.008 ## cameroon 26 0.008 ## canada 26 0.008 ## cape verde is. 26 0.008 ## central afr.r. 26 0.008 ## chad 26 0.008 ## chile 26 0.008 ## china 26 0.008 ## colombia 26 0.008 ## comoros 26 0.008 ## congo 26 0.008 ## costa rica 26 0.008 ## cyprus 26 0.008 ## czechoslovakia 26 0.008 ## denmark 26 0.008 ## dominican rep. 26 0.008 ## ecuador 26 0.008 ## egypt 26 0.008 ## el salvador 26 0.008 ## ethiopia 26 0.008 ## fiji 26 0.008 ## finland 26 0.008 ## france 26 0.008 ## gabon 26 0.008 ## gambia 26 0.008 ## germany west 26 0.008 ## ghana 26 0.008 ## greece 26 0.008 ## guatemala 26 0.008 ## guinea 26 0.008 ## guinea-biss 26 0.008 ## guyana 26 0.008 ## haiti 26 0.008 ## honduras 26 0.008 ## hong kong 26 0.008 ## iceland 26 0.008 ## india 26 0.008 ## indonesia 26 0.008 ## iran 26 0.008 ## iraq 26 0.008 ## ireland 26 0.008 ## israel 26 0.008 ## italy 26 0.008 ## ivory coast 26 0.008 ## jamaica 26 0.008 ## japan 26 0.008 ## jordan 26 0.008 ## kenya 26 0.008 ## korea 26 0.008 ## lesotho 26 0.008 ## liberia 26 0.008 ## luxembourg 26 0.008 ## madagascar 26 0.008 ## malawi 26 0.008 ## malaysia 26 0.008 ## mali 26 0.008 ## malta 26 0.008 ## mauritania 26 0.008 ## mauritius 26 0.008 ## mexico 26 0.008 ## morocco 26 0.008 ## mozambique 26 0.008 ## myanmar 26 0.008 ## namibia 26 0.008 ## nepal 26 0.008 ## netherlands 26 0.008 ## new zealand 26 0.008 ## nicaragua 26 0.008 ## niger 26 0.008 ## nigeria 26 0.008 ## norway 26 0.008 ## pakistan 26 0.008 ## panama 26 0.008 ## papua n.guinea 26 0.008 ## paraguay 26 0.008 ## peru 26 0.008 ## philippines 26 0.008 ## portugal 26 0.008 ## puerto rico 26 0.008 ## reunion 26 0.008 ## romania 26 0.008 ## rwanda 26 0.008 ## saudi arabia 26 0.008 ## senegal 26 0.008 ## seychelles 26 0.008 ## singapore 26 0.008 ## somalia 26 0.008 ## south africa 26 0.008 ## spain 26 0.008 ## sri lanka 26 0.008 ## suriname 26 0.008 ## swaziland 26 0.008 ## sweden 26 0.008 ## switzerland 26 0.008 ## syria 26 0.008 ## taiwan 26 0.008 ## tanzania 26 0.008 ## thailand 26 0.008 ## togo 26 0.008 ## trinidad&amp;tobago 26 0.008 ## tunisia 26 0.008 ## turkey 26 0.008 ## u.k. 26 0.008 ## u.s.a. 26 0.008 ## u.s.s.r. 26 0.008 ## uganda 26 0.008 ## uruguay 26 0.008 ## venezuela 26 0.008 ## yugoslavia 26 0.008 ## zaire 26 0.008 ## zambia 26 0.008 ## zimbabwe 26 0.008 The last merge function is anti_join(): gas_pwt_anti &lt;- gasoline %&gt;% anti_join(pwt, by = c(&quot;country&quot;, &quot;year&quot;)) glimpse(gas_pwt_anti) ## Observations: 19 ## Variables: 6 ## $ country &lt;chr&gt; &quot;germany&quot;, &quot;germany&quot;, &quot;germany&quot;, &quot;germany&quot;, &quot;germany&quot;... ## $ year &lt;int&gt; 1960, 1961, 1962, 1963, 1964, 1965, 1966, 1967, 1968,... ## $ lgaspcar &lt;dbl&gt; 3.916953, 3.885345, 3.871484, 3.848782, 3.868993, 3.8... ## $ lincomep &lt;dbl&gt; -6.159837, -6.120923, -6.094258, -6.068361, -6.013442... ## $ lrpmg &lt;dbl&gt; -0.1859108, -0.2309538, -0.3438417, -0.3746467, -0.39... ## $ lcarpcap &lt;dbl&gt; -9.342481, -9.183841, -9.037280, -8.913630, -8.811013... gas_pwt_anti %&gt;% tabyl(country) ## country n percent ## germany 19 1 gas_pwt_anti has the columns the gasoline dataset as well as the only country from gasoline that is not in pwt: “germany”. 5.7 Special packages for special kinds of data: {forcats}, {lubridate}, and {stringr} 5.7.1 🐈🐈🐈🐈 Factor variables are very useful but not very easy to manipulate. forcats contains very useful functions that make working on factor variables painless. I use mainly three functions in my work, fct_recode(), fct_relevel() and fct_relabel(), so that’s what I’ll be showing. Remember in chapter 3 when I very quickly explained what were factor variables? In this section, we are going to work a little bit with these type of variable. factors are very useful, and the forcats package includes some handy functions to work with them. First, let’s load the forcats package: library(forcats) as an example, we are going to work with the gss_cat dataset that is included in forcats. Let’s load that: data(gss_cat) head(gss_cat) ## # A tibble: 6 x 9 ## year marital age race rincome partyid relig denom tvhours ## &lt;int&gt; &lt;fct&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 2000 Never ma… 26 White $8000 to… Ind,near … Protes… Southe… 12 ## 2 2000 Divorced 48 White $8000 to… Not str r… Protes… Baptis… NA ## 3 2000 Widowed 67 White Not appl… Independe… Protes… No den… 2 ## 4 2000 Never ma… 39 White Not appl… Ind,near … Orthod… Not ap… 4 ## 5 2000 Divorced 25 White Not appl… Not str d… None Not ap… 1 ## 6 2000 Married 25 White $20000 -… Strong de… Protes… Southe… NA as you can see, marital, race, rincome and partyid are all factor variables. Let’s take a closer look at marital: str(gss_cat$marital) ## Factor w/ 6 levels &quot;No answer&quot;,&quot;Never married&quot;,..: 2 4 5 2 4 6 2 4 6 6 ... and let’s see rincome: str(gss_cat$rincome) ## Factor w/ 16 levels &quot;No answer&quot;,&quot;Don&#39;t know&quot;,..: 8 8 16 16 16 5 4 9 4 4 ... factor variables have different levels and the forcats package includes functions that allow you to recode, collapse and do all sorts of things on these levels. For example , using forcats::fct_recode() you can recode levels: gss_cat = gss_cat %&gt;% mutate(marital = fct_recode(marital, refuse = &quot;No answer&quot;, never_married = &quot;Never married&quot;, divorced = &quot;Separated&quot;, divorced = &quot;Divorced&quot;, widowed = &quot;Widowed&quot;, married = &quot;Married&quot;)) gss_cat %&gt;% tabyl(marital) ## marital n percent ## refuse 17 0.0007913234 ## never_married 5416 0.2521063166 ## divorced 4126 0.1920588372 ## widowed 1807 0.0841130196 ## married 10117 0.4709305032 Using fct_recode(), I was able to recode the levels and collapse Separated and Divorced to a single category called divorced. As you can see, refuse and widowed are less than 10%, so maybe you’d want to lump these categories together: gss_cat = gss_cat %&gt;% mutate(marital = fct_lump(marital, prop = 0.10, other_level = &quot;other&quot;)) gss_cat %&gt;% tabyl(marital) ## marital n percent ## never_married 5416 0.25210632 ## divorced 4126 0.19205884 ## married 10117 0.47093050 ## other 1824 0.08490434 I suggest you read forcats’ help page and discover the other functions it contains. 5.7.2 Get your dates right with {lubridate} 5.7.3 Manipulate strings with {stringr} 5.8 Working with a list of datasets 5.8.1 Getting to know map() This is our first encouter with a typical functional programming function, map(). Let’s read the list of datasets from the previous chapter: paths = Sys.glob(&quot;datasets/unemployment/*.csv&quot;) all_datasets = import_list(paths) str(all_datasets) ## List of 4 ## $ unemp_2013:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Total employed population : int [1:118] 223407 17802 1703 844 1431 4094 2146 971 1218 3002 ... ## ..$ of which: Wage-earners : int [1:118] 203535 15993 1535 750 1315 3800 1874 858 1029 2664 ... ## ..$ of which: Non-wage-earners: int [1:118] 19872 1809 168 94 116 294 272 113 189 338 ... ## ..$ Unemployed : int [1:118] 19287 1071 114 25 74 261 98 45 66 207 ... ## ..$ Active population : int [1:118] 242694 18873 1817 869 1505 4355 2244 1016 1284 3209 ... ## ..$ Unemployment rate (in %) : num [1:118] 7.95 5.67 6.27 2.88 4.92 ... ## ..$ Year : int [1:118] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ... ## $ unemp_2014:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Total employed population : int [1:118] 228423 18166 1767 845 1505 4129 2172 1007 1268 3124 ... ## ..$ of which: Wage-earners : int [1:118] 208238 16366 1606 757 1390 3840 1897 887 1082 2782 ... ## ..$ of which: Non-wage-earners: int [1:118] 20185 1800 161 88 115 289 275 120 186 342 ... ## ..$ Unemployed : int [1:118] 19362 1066 122 19 66 287 91 38 61 202 ... ## ..$ Active population : int [1:118] 247785 19232 1889 864 1571 4416 2263 1045 1329 3326 ... ## ..$ Unemployment rate (in %) : num [1:118] 7.81 5.54 6.46 2.2 4.2 ... ## ..$ Year : int [1:118] 2014 2014 2014 2014 2014 2014 2014 2014 2014 2014 ... ## $ unemp_2015:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Total employed population : int [1:118] 233130 18310 1780 870 1470 4130 2170 1050 1300 3140 ... ## ..$ of which: Wage-earners : int [1:118] 212530 16430 1620 780 1350 3820 1910 920 1100 2770 ... ## ..$ of which: Non-wage-earners: int [1:118] 20600 1880 160 90 120 310 260 130 200 370 ... ## ..$ Unemployed : int [1:118] 18806 988 106 29 73 260 80 41 72 169 ... ## ..$ Active population : int [1:118] 251936 19298 1886 899 1543 4390 2250 1091 1372 3309 ... ## ..$ Unemployment rate (in %) : num [1:118] 7.46 5.12 5.62 3.23 4.73 ... ## ..$ Year : int [1:118] 2015 2015 2015 2015 2015 2015 2015 2015 2015 2015 ... ## $ unemp_2016:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ Commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ Total employed population : int [1:118] 236100 18380 1790 870 1470 4160 2160 1030 1330 3150 ... ## ..$ of which: Wage-earners : int [1:118] 215430 16500 1640 780 1350 3840 1900 900 1130 2780 ... ## ..$ of which: Non-wage-earners: int [1:118] 20670 1880 150 90 120 320 260 130 200 370 ... ## ..$ Unemployed : int [1:118] 18185 975 91 27 66 246 76 35 70 206 ... ## ..$ Active population : int [1:118] 254285 19355 1881 897 1536 4406 2236 1065 1400 3356 ... ## ..$ Unemployment rate (in %) : num [1:118] 7.15 5.04 4.84 3.01 4.3 ... ## ..$ Year : int [1:118] 2016 2016 2016 2016 2016 2016 2016 2016 2016 2016 ... For working with lists, another package from the tidyverse is very useful, and that would be purrr. purrr has functions to work with lists, and we are going to focus on two of them, map() and reduce(). map()… maps a function to each element of a list. reduce() is a bit more complicated so we’ll leave that for later. map() and reduce() are also called functionals; functions that use functions as arguments. The first thing we are going to do is use a function to clean the names of the datasets. These names are not very easy to work with; there are spaces, and it would be better if the names of the columns would be all lowercase. For this we are going to use the function clean_names() from the janitor package. For a single dataset, I would write this: library(janitor) one_dataset = one_dataset %&gt;% clean_names() and I would get a dataset with column names in lowercase and spaces replaced by _ (and other corrections). How can I apply, or map, this function to each dataset in the list? To do this I need to use purrr::map(): library(purrr) all_datasets = all_datasets %&gt;% map(clean_names) all_datasets %&gt;% glimpse() ## List of 4 ## $ unemp_2013:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ total_employed_population : int [1:118] 223407 17802 1703 844 1431 4094 2146 971 1218 3002 ... ## ..$ of_which_wage_earners : int [1:118] 203535 15993 1535 750 1315 3800 1874 858 1029 2664 ... ## ..$ of_which_non_wage_earners : int [1:118] 19872 1809 168 94 116 294 272 113 189 338 ... ## ..$ unemployed : int [1:118] 19287 1071 114 25 74 261 98 45 66 207 ... ## ..$ active_population : int [1:118] 242694 18873 1817 869 1505 4355 2244 1016 1284 3209 ... ## ..$ unemployment_rate_in_percent: num [1:118] 7.95 5.67 6.27 2.88 4.92 ... ## ..$ year : int [1:118] 2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ... ## $ unemp_2014:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ total_employed_population : int [1:118] 228423 18166 1767 845 1505 4129 2172 1007 1268 3124 ... ## ..$ of_which_wage_earners : int [1:118] 208238 16366 1606 757 1390 3840 1897 887 1082 2782 ... ## ..$ of_which_non_wage_earners : int [1:118] 20185 1800 161 88 115 289 275 120 186 342 ... ## ..$ unemployed : int [1:118] 19362 1066 122 19 66 287 91 38 61 202 ... ## ..$ active_population : int [1:118] 247785 19232 1889 864 1571 4416 2263 1045 1329 3326 ... ## ..$ unemployment_rate_in_percent: num [1:118] 7.81 5.54 6.46 2.2 4.2 ... ## ..$ year : int [1:118] 2014 2014 2014 2014 2014 2014 2014 2014 2014 2014 ... ## $ unemp_2015:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ total_employed_population : int [1:118] 233130 18310 1780 870 1470 4130 2170 1050 1300 3140 ... ## ..$ of_which_wage_earners : int [1:118] 212530 16430 1620 780 1350 3820 1910 920 1100 2770 ... ## ..$ of_which_non_wage_earners : int [1:118] 20600 1880 160 90 120 310 260 130 200 370 ... ## ..$ unemployed : int [1:118] 18806 988 106 29 73 260 80 41 72 169 ... ## ..$ active_population : int [1:118] 251936 19298 1886 899 1543 4390 2250 1091 1372 3309 ... ## ..$ unemployment_rate_in_percent: num [1:118] 7.46 5.12 5.62 3.23 4.73 ... ## ..$ year : int [1:118] 2015 2015 2015 2015 2015 2015 2015 2015 2015 2015 ... ## $ unemp_2016:&#39;data.frame&#39;: 118 obs. of 8 variables: ## ..$ commune : chr [1:118] &quot;Grand-Duche de Luxembourg&quot; &quot;Canton Capellen&quot; &quot;Dippach&quot; &quot;Garnich&quot; ... ## ..$ total_employed_population : int [1:118] 236100 18380 1790 870 1470 4160 2160 1030 1330 3150 ... ## ..$ of_which_wage_earners : int [1:118] 215430 16500 1640 780 1350 3840 1900 900 1130 2780 ... ## ..$ of_which_non_wage_earners : int [1:118] 20670 1880 150 90 120 320 260 130 200 370 ... ## ..$ unemployed : int [1:118] 18185 975 91 27 66 246 76 35 70 206 ... ## ..$ active_population : int [1:118] 254285 19355 1881 897 1536 4406 2236 1065 1400 3356 ... ## ..$ unemployment_rate_in_percent: num [1:118] 7.15 5.04 4.84 3.01 4.3 ... ## ..$ year : int [1:118] 2016 2016 2016 2016 2016 2016 2016 2016 2016 2016 ... So now, what if I want to know, for each dataset, which communes have an unemployment rate that is less than, say, 3%? For a single dataset I would do something like this: one_dataset %&gt;% filter(unemployment_rate_in_percent &lt; 3) But for a list of datasets, map() is needed (and as you will see, that is not all that is needed): all_datasets %&gt;% map(~filter(., unemployment_rate_in_percent &lt; 3)) ## $unemp_2013 ## commune total_employed_population of_which_wage_earners ## 1 Garnich 844 750 ## 2 Leudelange 1064 937 ## 3 Bech 526 463 ## of_which_non_wage_earners unemployed active_population ## 1 94 25 869 ## 2 127 32 1096 ## 3 63 16 542 ## unemployment_rate_in_percent year ## 1 2.876870 2013 ## 2 2.919708 2013 ## 3 2.952030 2013 ## ## $unemp_2014 ## commune total_employed_population of_which_wage_earners ## 1 Garnich 845 757 ## 2 Leudelange 1102 965 ## 3 Bech 543 476 ## 4 Flaxweiler 879 789 ## of_which_non_wage_earners unemployed active_population ## 1 88 19 864 ## 2 137 34 1136 ## 3 67 15 558 ## 4 90 27 906 ## unemployment_rate_in_percent year ## 1 2.199074 2014 ## 2 2.992958 2014 ## 3 2.688172 2014 ## 4 2.980132 2014 ## ## $unemp_2015 ## commune total_employed_population of_which_wage_earners ## 1 Bech 520 450 ## 2 Bous 750 680 ## of_which_non_wage_earners unemployed active_population ## 1 70 14 534 ## 2 70 22 772 ## unemployment_rate_in_percent year ## 1 2.621723 2015 ## 2 2.849741 2015 ## ## $unemp_2016 ## commune total_employed_population of_which_wage_earners ## 1 Reckange-sur-Mess 980 850 ## 2 Bech 520 450 ## 3 Betzdorf 1500 1350 ## 4 Flaxweiler 910 820 ## of_which_non_wage_earners unemployed active_population ## 1 130 30 1010 ## 2 70 11 531 ## 3 150 45 1545 ## 4 90 24 934 ## unemployment_rate_in_percent year ## 1 2.970297 2016 ## 2 2.071563 2016 ## 3 2.912621 2016 ## 4 2.569593 2016 I know what you’re thinking… what the hell?. Let me explain: map() needs a function to map to each element of the list. all_datasets is the list to which I want to map the function. But what function? filter() is the function I need, so why doesn’t: all_datasets %&gt;% map(filter(unemployment_rate_in_percent &lt; 3)) work? This is a bit complicated, and has to do with what is called environments. If you try to run the code above, you will get this error message: Error in filter(unemployment_rate_in_percent &lt; 3) : object &#39;unemployment_rate_in_percent&#39; not found I won’t go into details, but by writing ~filter(., unemployment_rate_in_percent &lt; 3), which is a formula (~ is the symbol to define formulas, more on this in the later chapters), map() converts it to a function that it can use. If you want to know more about this, you can read it in Advanced R by Hadley Wickham, but it is an advanced topic. 5.8.2 Getting to know reduce() Using map() we now know how to apply a function to each dataset of a list. But maybe it would be easier to merge all the datasets first, and then manipulate them? Before that though, I am going to teach you how to use purrr::reduce(), another very powerful function that works on lists. This is a function that you can find in other programming languages, but sometimes it is called fold. I think that the following example illustrates the power of reduce() well: numbers = seq(1, 5) # Create a vector with the numbers 1 to 5 reduce(numbers, `+`, .init = 0) ## [1] 15 reduce() takes a function as an argument, here the function +1 and then does the following computation: 0 + numbers[1] + numbers[2] + numbers[3]... It applies the user supplied function successively but has to start with something, so we give it the argument init also. This argument is actually optional, but I show it here because in some cases it might be useful to start the computations at another value than 0.reduce() generalizes functions that only take two arguments. If you were to write a function that returns the minimum between two numbers: my_min = function(a, b){ if(a &lt; b){ return(a) } else { return(b) } } You could use reduce() to get the minimum of a list of numbers: numbers2 = c(3, 1, -8, 9) reduce(numbers2, my_min) ## [1] -8 As long as you provide a function and a list of elements to reduce(), you will get a single output. So how could reduce() help us with merging all the datasets that are in the list? dplyr comes with a lot of function to merge two datasets. Remember that I said before that reduce() allows you to generalize a function of two arguments? Let’s try it with our list of datasets: unemp_lux = reduce(all_datasets, full_join) ## Joining, by = c(&quot;commune&quot;, &quot;total_employed_population&quot;, &quot;of_which_wage_earners&quot;, &quot;of_which_non_wage_earners&quot;, &quot;unemployed&quot;, &quot;active_population&quot;, &quot;unemployment_rate_in_percent&quot;, &quot;year&quot;) ## Joining, by = c(&quot;commune&quot;, &quot;total_employed_population&quot;, &quot;of_which_wage_earners&quot;, &quot;of_which_non_wage_earners&quot;, &quot;unemployed&quot;, &quot;active_population&quot;, &quot;unemployment_rate_in_percent&quot;, &quot;year&quot;) ## Joining, by = c(&quot;commune&quot;, &quot;total_employed_population&quot;, &quot;of_which_wage_earners&quot;, &quot;of_which_non_wage_earners&quot;, &quot;unemployed&quot;, &quot;active_population&quot;, &quot;unemployment_rate_in_percent&quot;, &quot;year&quot;) glimpse(unemp_lux) ## Observations: 472 ## Variables: 8 ## $ commune &lt;chr&gt; &quot;Grand-Duche de Luxembourg&quot;, &quot;Can... ## $ total_employed_population &lt;int&gt; 223407, 17802, 1703, 844, 1431, 4... ## $ of_which_wage_earners &lt;int&gt; 203535, 15993, 1535, 750, 1315, 3... ## $ of_which_non_wage_earners &lt;int&gt; 19872, 1809, 168, 94, 116, 294, 2... ## $ unemployed &lt;int&gt; 19287, 1071, 114, 25, 74, 261, 98... ## $ active_population &lt;int&gt; 242694, 18873, 1817, 869, 1505, 4... ## $ unemployment_rate_in_percent &lt;dbl&gt; 7.947044, 5.674773, 6.274078, 2.8... ## $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 201... full_join() is one of the dplyr function that merges data. There are others that might be useful depending on the kind of join operation you need. Let’s write this data to disk as we’re going to keep using it for the next chapters: export(unemp_lux, &quot;datasets/unemp_lux.csv&quot;) 5.9 List-columns To learn about list-columns, let’s first focus on a single character of the starwars dataset: data(starwars) starwars %&gt;% filter(name == &quot;Luke Skywalker&quot;) %&gt;% glimpse() ## Observations: 1 ## Variables: 13 ## $ name &lt;chr&gt; &quot;Luke Skywalker&quot; ## $ height &lt;int&gt; 172 ## $ mass &lt;dbl&gt; 77 ## $ hair_color &lt;chr&gt; &quot;blond&quot; ## $ skin_color &lt;chr&gt; &quot;fair&quot; ## $ eye_color &lt;chr&gt; &quot;blue&quot; ## $ birth_year &lt;dbl&gt; 19 ## $ gender &lt;chr&gt; &quot;male&quot; ## $ homeworld &lt;chr&gt; &quot;Tatooine&quot; ## $ species &lt;chr&gt; &quot;Human&quot; ## $ films &lt;list&gt; [&lt;&quot;Revenge of the Sith&quot;, &quot;Return of the Jedi&quot;, &quot;Th... ## $ vehicles &lt;list&gt; [&lt;&quot;Snowspeeder&quot;, &quot;Imperial Speeder Bike&quot;&gt;] ## $ starships &lt;list&gt; [&lt;&quot;X-wing&quot;, &quot;Imperial shuttle&quot;&gt;] We see that the columns films, vehicles and starships are all lists, and in the case of films, it lists all the films where Luke Skywalker has appeared. What if you want to take a closer look at this list? starwars %&gt;% filter(name == &quot;Luke Skywalker&quot;) %&gt;% pull(films) ## [[1]] ## [1] &quot;Revenge of the Sith&quot; &quot;Return of the Jedi&quot; ## [3] &quot;The Empire Strikes Back&quot; &quot;A New Hope&quot; ## [5] &quot;The Force Awakens&quot; pull() is a dplyr function that extract (pulls) the column you’re interested in. It is quite useful when you want to inspect a column. Suppose we want to create a categorical variable which counts the number of movies in which the characters have appeared. For this we need to compute the length of the list, or count the number of elements this list has. Let’s try with length() a base R function: starwars %&gt;% filter(name == &quot;Luke Skywalker&quot;) %&gt;% pull(films) %&gt;% length() ## [1] 1 This might be surprising at first, because we know that Luke Skywalker has appeared in more than 1 movie… the problem here is that for each individual, films is a list, whose single element is a vector of characters. This means that length(films) computes the length of the list, which is one, and not the length of the vector contained in the list! How can we get the length of the vector of characters contained in the list and for each character? For this we need to use dplyr::rowwise() and remove the filter() function and use mutate() to add this column to the dataset: starwars = starwars %&gt;% rowwise() %&gt;% mutate(n_films = length(films)) dplyr::rowwise() is useful when working with list-columns: columns that have lists as elements. Let’s take a look at the characters and the number of films they have appeared in: starwars %&gt;% select(name, n_films) ## Source: local data frame [87 x 2] ## Groups: &lt;by row&gt; ## ## # A tibble: 87 x 2 ## name n_films ## &lt;chr&gt; &lt;int&gt; ## 1 Luke Skywalker 5 ## 2 C-3PO 6 ## 3 R2-D2 7 ## 4 Darth Vader 4 ## 5 Leia Organa 5 ## 6 Owen Lars 3 ## 7 Beru Whitesun lars 3 ## 8 R5-D4 1 ## 9 Biggs Darklighter 1 ## 10 Obi-Wan Kenobi 6 ## # ... with 77 more rows Now we can create a factor variable that groups characters by asking whether they appeared only in 1 movie, or more: starwars = starwars %&gt;% mutate(more_1 = case_when(n_films == 1 ~ &quot;Exactly one movie&quot;, n_films != 1 ~ &quot;More than 1 movie&quot;)) case_when() is a dplyr function that works similarly to the standard if..else.. construct of many programming languages (R also has this, we are going to learn about it in later chapters). You can also create list columns with your own datasets, by using tidyr::nest(). Remember the fake survey_data I created to illustrate spread() and gather()? Let’s go back to that dataset again: print(survey_data) ## # A tibble: 8 x 3 ## id variable value ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 var1 1 ## 2 1 var2 0.2 ## 3 2 var1 1.4 ## 4 2 var2 1.9 ## 5 3 var1 0.1 ## 6 3 var2 2.8 ## 7 4 var1 1.7 ## 8 4 var2 1.9 nested_data = survey_data %&gt;% nest(variable, value) print(nested_data) ## # A tibble: 4 x 2 ## id data ## &lt;dbl&gt; &lt;list&gt; ## 1 1 &lt;tibble [2 × 2]&gt; ## 2 2 &lt;tibble [2 × 2]&gt; ## 3 3 &lt;tibble [2 × 2]&gt; ## 4 4 &lt;tibble [2 × 2]&gt; This creates a new tibble, with columns id and data. data is a list-column that contains tibbles; each tibble is the variable and value for each individual: nested_data %&gt;% filter(id == &quot;1&quot;) %&gt;% pull(data) ## [[1]] ## # A tibble: 2 x 2 ## variable value ## &lt;chr&gt; &lt;dbl&gt; ## 1 var1 1 ## 2 var2 0.2 As you can see, for individual 1, the column data contains a 2x2 tibble with columns variable and value. You might be wondering why this is useful, because this seems to introduce an unnecessary layer of complexity. The usefulness of list-columns will become apparent in the next chapters, where we are going to learn how to repeat actions over, say, individuals. 5.10 Exercises Exercise 1 Load the LaborSupply dataset from the Ecdat package and answer the following questions: Compute the average annual hours worked by year (plus standard deviation) What age group worked the most hours in the year 1982? Create a variable, n_years that equals the number of years an individual stays in the panel. Is the panel balanced? Which are the individuals that do not have any kids during the whole period? Create a variable, no_kids, that flags these individuals (1 = no kids, 0 = kids) Using the no_kids variable from before compute the average wage, standard deviation and number of observations in each group for the year 1980 (no kids group vs kids group). Create the lagged logarithm of hours worked and wages. Remember that this is a panel. Exercise 2 What does the following code do? Copy and paste it in an R interpreter to find out! LaborSupply %&gt;% group_by(id) %&gt;% mutate_at(vars(starts_with(&quot;l&quot;)), funs(lag, lead)) mutate_at() is a scoped version of mutate() which allows you to specify a number of columns and functions in one go. This also exists for summarise(). Using summarise_at(), compute the mean, standard deviation and number of individuals of lnhr and lnwg for each individual. Exercise 3 In the dataset folder you downloaded at the beginning of the chapter, there is a folder called “unemployment”. I used the data in the section about working with lists of datasets. Using rio::import_list(), read the 4 datasets into R. Using map(), map the janitor::clean_names() function to each dataset (just like in the example in the section on working with lists of datasets). Then, still with map() and mutate() convert all commune names in the commune column with the function tolower(), in a new column called lcommune. This is not an easy exercise; so here are some hints: Remember that all_datasets is a list of datasets. Which function do you use when you want to map a function to each element of a list? Each element of all_datasets are data.frame objects. Which function do you use to add a column to a data.frame? What symbol can you use to access a column of a data.frame? This is simply the + operator you’re used to. Try this out: `+`(1, 5) and you’ll see + is a function like any other. You just have to write backticks around the plus symbol to make it work.↩ "]
]
